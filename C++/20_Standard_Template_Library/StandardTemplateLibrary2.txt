------------Standard Template Library Continued----------------------------------------
std::list and std::forward_list

.Sequence containers
.Elements contained in non-contiguous memory
.No direct access to elements
.Very efficient for inserting and deleting elements once it is found 
---------------------------------------------
std::list
#include <list>

.Dynamic size
    -lists of elements
    -list is bidirectional (doubly-linked)
.Direct element access is NOT provided
.Rapid insertion and deletion of elements anywhere in the container (O(1))
.All iterators available and invalidate when corresponding element is deleted

std::list<int> l {1,2,3};

    1 <-------> 2 <-------> 3
 front()                 back()
---------------------------------------------
std::list<int> l1 {1,2,3,4,5};
std::list<int> l2 (10,100);

std::list<std::string> stooges {
    std::string{"Larry"},
    "Moe",
    std::string{"Curly"}
};
l1 = {2,4,6,8,10};
----------------------------------------------
std::list<int> l {1,2,3,4,5};

std::cout << l.size();    // 5
std::cout << l.max_size;  // very large number
std::cout << l.front();   // 1
std::cout << l.back();    // 5 
----------------------------------------------
Person p1{"Larry",18};
std::list<Person> l;

l.push_back(p1);
l.pop_back();
l.push_front(Person{"Larry",18});
l.pop_front();
l.emplace_front("Ben",30);
l.emplace_back("Layla",32);
-----------------------------------------------
std::list<int> l {1,2,3,4,5};

auto it = std::find(l.begin(), l.end(), 3);
l.insert(it, 10);  // 1 2 10 3 4 5
l.erase(it);       // 1 2 10 4 5
l.resize(2);       // 1 2
l.resize(5);       // 1 2 0 0 0 
-----------------------------------------------
Traversing the List

std::list<int> l {1,2,3,4,5};
auto it = std::find(l.begin(), l.end(), 3);

std::cout << *it;  // 3
it++;
std::cout << *it;  // 4
it--;
std::cout << *it;  // 3 
-------------------------------------------------
Forward List - std::forward_list

#include <forward_list>   // less overhead than list, but singly-linked 
.Dynamic size
    -Lists of elements
    -List uni-directional (singly-linked)
    -Less overhead than a std::list
.Direct element access is NOT provided 
.Rapid insertion and deletion of elements anywhere in the container (O(1))
.Reverse iterators are not available. Iterators invalidate when corresponding 
element is deleted 

std::forward_list<int> 1 {1,2,3,4,5};

l.size() // NOT AVAILABLE for forward lists
std::cout << l.max_size();  // very large number
std::cout << l.front();     // 1
std::cout << l.back();      // NOT AVAILABLE for forward lists
-------------------------------------------
Person p1{"Larry",18};
std::forward_list<Person> l;

l.push_front(p1);            // add p1 to front 
l.pop_front();               // remove front element 
l.emplace_front("Moe",24);   // initialize and add to front
--------------------------------------------
std::forward_list<int> l {1,2,3,4,5};
auto it = std::find(l.begin(), l.end(), 3);

l.insert_after(it,10);    // 1 2 3 10 4 5
l.emplace_after(it,100); // 1 2 3 100 10 4 5
l.erase_after(it);        // erases the 100, 1 2 3 10 4 5
l.resize(2);              // 1 2
l.resize(5);              // 1 2 0 0 0 
----------------------------------------------------------------------------------------
Associative Containers - std::set

.Collection of stored objects that allow fast retrieval using a key
.STL provides Sets and Maps
.Usually implemented as a balanced binary tree or hashsets
.Most operations are very efficient

.Sets:
    -std::set
    -std::unordered_set
    -std::multiset
    -std::unordered_multiset 
----------------------------------------------
#include <set>

.Similar to a mathematical set 
.Ordered by key
.No duplicate elements
.All iterators available and invalidate when corresponding element is deleted 

std::set<int> s {1,2,3,4,5};
std::set<std::string> stooges{
    std::string{"Larry"},
    "Moe",
    std::string{"Curly"}
};
s = {2,4,6,8,10};
-----------------------------------------------
std::set<int> s {4,1,1,3,3,2,5};  // 1 2 3 4 5, automatically sorted 
std::cout << s.size();        // 5
std::cout << s.max_size();    // very large number 

.No concept of front and back, must use insert/emplace 
s.insert(7);   // 1 2 3 4 5 7 
-----------------------------------------------
Person p1{"Larry",18};
Person p2{"Moe",25};

std::set<Person> stooges;
stooges.insert(p1);               // adds p1 to set 
auto result = stooges.insert(p2); // adds p2 to set 

.uses operator< for ordering
.returns a std::pair<iterator, bool> 
    -iterator to the inserted element or to the duplicate in the set
    -boolean indicating success or failure of insertion 
-----------------------------------------------
std::set<int> s {1,2,3,4,5};

s.erase(3);   // erase the 3: 1 2 4 5 

Better:

auto it = s.find(4);
if (it != s.end()){
    s.erase(it);     // erase the 4: 1 2 5
}
------------------------------------------------
std::set<int> s {1,2,3,4,5};

int num = s.count(1);  // 0 or 1 if found 
s.clear();             // remove all elements 
s.empty();             // 0 or 1 if set is empty 
------------------------------------------------
Other Sets:

#include <set>
std::multi_set;

.Sorted by key, allows duplicate elements and all iterators are available
------------------------------------------------
#include <unordered_set>
std::unordered_set;

.Elements are unordered, no duplicate elements and no reverse iterators allowed 
.Elements cannot be modified - they must be erased and a new element inserted 
------------------------------------------------
#include <unordered_set>
std::unordered_multiset;

.Elements are unordered, allows duplicate elements and iterators are available.
---------------------------------------------------------------------------------------
Associative Containers - std::map

std::map, std::unordered_map, std::multimap, std::unordered_multimap 

#include <map>
.Similar to a dictionary
.Elements are stored as Key, Value pairs (std::pair)
.Ordered by Key
.No duplicate elements (keys are unique)
.Direct element access using the key
.All iterators available and invalidate when corresponding element is deleted 

std::map<std::string, int> m1 {
    {"Larry",18},
    {"Moe",25}
};

std::map<std::string, std::string> m2 {
    {"Bob","Butcher"},
    {"Anne","Baker"},
    {"George","Candlestick maker"}
};

std::cout << m2.size();     // 3 
std::cout << m2.max_size(); // very large number    

std::pair<std::string, std::string> p1 {"James","Mechanic"};
m2.insert(p1);
m2.insert(std::make_pair("Roger","Ranger"));

m2["Frank"] = "Teacher";     // performs insert 
m2["Frank"] = "Instructor";   // updates value at key Frank
m2.at("Frank") = "Professor"; // exception handling if key does not exist 

m2.erase("Anne");                 // erases Anne key
if (m2.find("Bob") != m.end()){
    std::cout << "Found Bob!";
}

auto it = m2.find("George");
if (it != m2.end()){
    m2.erase(it);                 // erases George key 
}

int num = m2.count("Bob");   // 0 or 1 
m2.clear();                  // remove all elements 
m2.empty();                  // true or false 
-------------------------------------------------------
#include <map> 
std::multi_map

.Ordered by key and allows all iterators, but also allows DUPLICATE ELEMENTS 
-------------------------------------------------------
#include <unordered_map>
std::unordered_map

.Elements are unordered, no duplicates allowed and no reverse iterators allowed 
--------------------------------------------------------
#include <unordered_map>
std::unordered_multimap

.Elements are unordered, no reverse iterators but allows DUPLICATE ELEMENTS 
---------------------------------------------------------------------------------------
