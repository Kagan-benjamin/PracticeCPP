------------------------Standard Template Library--------------------------------------
What is the STL?

.A library of powerful, reusable, adaptable, generic classes and functions
.Implemented using C++ templates
.Implements common data structures and algorithms
.Huge class library
.Developed by Alexander Stepanov (1994)

.Assortment of commonly used containers
.Known time and size complexity
.Tried and tested - reusability!
.Consistent, fast, and type-safe
.Extensible

STL Components:

Containers
    -Collections of objects or primitive types 
    -array, vector, deque, stack, set, map, etc.
Algorithms
    -Functions for processing sequeneces of elements from containers
    -find, max, count, accumulate, sort, etc.
Iterators
    -Generate sequences of element from containers
    -forward, reverse, by value, by reference, constant, etc.
-----------------------------------
#include <vector>
#include <algorithm>

std::vector<int> v {1,5,3};

std::sort(v.begin(), v.end());
for (auto elem : v){                    // std::sort
    std::cout << elem << std::endl;     //  1   3   5
}

std::reverse(v.begin(), v.end());
for (auto elem : v){                    // std::reverse 
    std::cout << elem << std::endl;     //  5   3   1
}

int sum{};
sum = std::accumulate(v.begin(), v.end(), 0);   // std::accumulate
std::cout << sum << std::endl;                  // 9
------------------------------------
Sequence Containers
    -array, vector, list, forward_list, deque    Order is maintained
Associative Containers
    -set, multi set, map, multi map              Order is maintained or not 
Container Adapters
    -stack, queue, priority queue                Cannot be used w/ iterators 
------------------------------------
Input Iterators          - from the container to the program
Output Iterators         - from the program to the container
Forward Iterators        - navigate one item at a time in one direction 
Bi-directional Iterators - navigate one item at a time in both directions
Random Acess Iterators   - directly access a container item 
------------------------------------
.About 60 algorithms in the STL
.Non-modifying vs Modifying algos.   
---------------------------------------------------------------------------------------
Generic Programming / Meta-programming
    -pre-processor macros

.Generic Programming 
    -Writing code that works with a variety of types as arguments, as long as
those argument types meet specific syntactic and semantic requirements
.Can be handled using Macros ***(Legacy style, not optimal for modern C++)***

.C++ preprocessor directives
.No type information
.Simple substitution

#define MAX_SIZE 100
#define PI 3.14159

if (num > MAX_SIZE){             
    std::cout << "Too big";
}
double area = PI * r * r;

This is inferior to using constants!
-------------------------------------
int max(int a, int b) {
    return (a > b) ? a : b;
}
int x = 100;
int y = 200;
std::cout << max(x,y); 
-------------------------------------
#define MAX(a,b) ((a>b) ? a : b)

std::cout << MAX(10,20) << std::endl;
std::cout << MAX(2.4,3.5) << std::endl;
std::cout << MAX('A','C') << std::endl;
-------------------------------------
#define SQUARE(a) ((a)*(a))

result = SQUARE(5);
result = 5*5;          

result = 100/SQUARE(5);
result = 100/5*5;                    
---------------------------------------------------------------------------------------
Generic Programming with Function Templates:

.What is a C++ Template?
    -Blueprint
    -Function and Class templates
    -Allows plugging-in any data type
    -Compiler generates the appropriate function/class from the blueprint
    -Generic programming / meta-programming 
-------------------------------
int max(int a, int b) {
    return (a > b) ? a : b;
}

int x = 100;
int y = 200;
std::cout << max(x,y);   // 200

How can we generalize this function using a template?
.We can replace type we want to generalize with a name, say T

template <typename T>      // can also use class, template <class T>
T max(T a, T b) {
    return (a > b) ? a : b;
}

int a{10};
int b{20};
std::cout << max<int>(a,b);    //  20
double c{12.34};
double d{23.45};
std::cout << max<double>(c,d); //  23.45
char e{'A'};
char f{'B'};
std::cout << max<char>(e,f);   //  B
------------------------------------
Player p1{"Hero",100,20};
Player p2{"Enemy",99,3};
std::cout << max<Player>(p1,p2);   // Will NOT compile unless << is explicitly overloaded
-------------------------------------
template <typename T1, typename T2>    // multiple types 
void func(T1 a, T1 b) {
    std::cout << a << " " << b;
}

func<int,double>(10,20.2);
func('A',12.4);
---------------------------------------------------------------------------------------
Generic Programming with Class Templates

.What is a C++ Class Template?
    -Similar to function template, but at the class level
    -Allows plugging-in any data type
    -Compiler generates the appropriate class from the blueprint 

template <typename T>
class Item {
private:
    std::string name;
    T value;            // enables use with many datatypes
public:
    Item(std::string name, T value)
        : name{name}, value{value} {}
    std::string get_name() const {return name;}
    T get_value() const {return value;}
};

Item<int> item1 {"Larry",1};
Item<double> item2 {"House", 1000.0};
Item<std::string> item3 {"Ben", "Boss"};
std::vector<Item<int>> vec;
----------------------------------------
template <typename T1, typename T2>
struct My_Pair {
    T1 first;
    T2 second;
};

My_Pair <std::string, int> p1 {"Ben",100};
My_Pair <int,double> p2 {124, 13.6};
std::vector<My_Pair<int,double>> vec;

std::pair
#include <utility>
std::pair<std::string, int> p1 {"Layla",100};
std::cout << p1.first;  // Layla
std::cout << p2.second; // 100
----------------------------------------------------------------------------------------
STL Containers

.Data structures that can store objects of almost any type
    -Template-based classes
.Each container has member functions
    -Some are specific to the container
    -Others are available to all containers
.Each container has an associated header file that must be included
    -#include <container_type>

Function:              |     Description:
-----------------------------------------
Default Constructor    |  Initializes an empty container     
Overloaded Constructor |  Initializes containers with many options
Copy Constructor       |  Initializes a container as a copy of another container
Move Constructor       |  Moves existing container to new container 
Destructor             |  Destroys a container 
Copy Assignment        |  Copy one container to another 
Move Assignment        |  Move one container to another 
Size                   |  Returns the number of elements in the container 
Empty                  |  Returns boolean - is the container empty?
Insert                 |  Inserts an element into the container 
Operator< / Operator<= |  Returns boolean - compare contents of 2 containers 
Operator> / Operator>= |  Returns boolean - compare contents of 2 containers 
Operator==  Operator!= |  Returns boolean - are the contents of 2 containers equal? 
Swap                   |  Swap the elements of 2 containers 
Erase                  |  Remove element(s) from a container 
Clear                  |  Remove all elements from a container 
Begin / End            |  Returns iterators to first element or end 
Rbegin / Rend          |  Returns reverse iterators to first element or end 
Cbegin / Cend          |  Returns constant iterators to first element or end 
Crbegin / Crend        |  Returns constant reverse iterators to first element or end 

.What types of elements can we store in containers?
    -A copy of the element will be stored in the container. 
    -All primitives are OK
    -Element should be: Copyable and Assignnable (copy constructor / copy assignment)
    -Element should be: Movable for efficiency (move constructor / move assignment)
    -Ordered associative containers must be able to compare elements
----------------------------------------------------------------------------------------
STL Iterators

.Allows abstracting an arbitrary container as a sequence of elements
.They are objects that work like pointers by design
.Most container classes can be traversed with iterators 

.Iterators must be declared based on the container type they will iterate over:
    container_type::iterator_type iterator_name;

std::vector<int>::iterator it1;
std::list<std::string>::iterator it2;
std::map<std::string, std::string>::iterator it3;
std::set<char>::iterator it4;

std::vector<int> vec{1,2,3};
vec.begin(); // 1, 0th element 
vec.end();   // null, one after the last element

std::set<char> suits {'C','H','S','D'};
suits.begin() // C
-------------------------------------
std::vector<int> vec{1,2,3};

std::vector<int>::iterator it = vec.begin();
                OR
auto it = vec.begin();
--------------------------------------
Operations with Iterators (it)

Operation:         |   Description:   |   Type of Iterator:
----------------------------------------------------
++it               |  Pre-increment   |   All
it++               |  Post-increment  |   All
it = it1           |  Assignment      |   All
*it                |  Dereference     |   Input/Output
it->               |  Arrow operator  |   Input/Output 
it == it1          |  Comparison (=)  |   Input 
it != it1          |  Comparison (!=) |   Input 
--it               |  Pre-decrement   |   Bidirectional 
it--               |  Post-decrement  |   Bidirectional
it + i, it += i    |  Increment       |   Random Access 
it - i, it -= i    |  Decrement       |   Random Access 
it < it1, it <= it1|  Comparison (<)  |   Random Access 
it > it1, it >= it1|  Comparison (>)  |   Random Access 
----------------------------------------
Example:

std::vector<int> vec{1,2,3};
std::vector<int>::iterator it = vec.begin();

while (it != vec.end()) {
    std::cout << *it < " ";
    ++it;
}

BETTER:

std::vector<int> vec{1,2,3};
for (auto it = vec.begin(); it != vec.end(); it++){
    std::cout << *it << " ";
}                                            // 1 2 3
------------------------------------------
Reverse Iterator Example:
.works in reverse
.last element is the first and first is the last
.++ moves backward, -- moves forward

std::vector<int> vec{1,2,3};
std::vector<int>::reverse_iterator it = vec.begin();

while (it != vec.end()) {
    std::cout << *it << " ";
    it++;
}                                              // 3 2 1 
---------------------------------------------
Const Iterators:

.begin() and end() 
    -iterator
.cbegin() and cend()
    -const_iterator
.rbegin() and rend()
    -reverse_iterator
.crbegin() and crend()
    -const_reverse_iterator
----------------------------------------------------------------------------------------
STL Algorithms:

.STL algorithms work on sequences of container elements provided to them
by an iterator
.STL has many common and useful algorithms
.http://en.cppreference.com/w/cpp/algorithm
.Many algorithms require extra information in order to do their work 
    -Functors (function objects)
    -Function pointers
    -Lambda expressions (C++11)

#include <algorithm>
.Different containers support different types of iterators
    -determines the types of algorithms supported
.All STL algorithms expect iterators as arguments
    -determines the sequence obtained from the container 

Iterator Invalidation:
.Iterators point to container elements
.It's possible that iterators become invalid during processing
.Suppose we are iterating over a vector of 10 elements 
    -And we clear() the vector while iterating, what happens?
    -Undefined behavior - our iterators are pointing to invalid locations
----------------------------------
Example, std::find

.The std::find algorithm tries to locate the first occurence of an element in a 
container
.There are many variations
.Find returns an iterator pointing to the located element or end()

std::vector<int> vec{1,2,3};
auto loc = std::find(vec.begin(), vec.end(), 3);
if (loc != vec.end()) {
    std::cout << *loc << std::endl;
}

.Find needs to be able to compare objects
.operator== is used and must be provided by your class

std::vector<Player> team { // Player intializations // };
Player p {"Hero", 100, 12};

auto loc = std::find(team.begin(), team.end(), p);
if (loc != vec.end()) {
    std::cout << *loc << std::endl;
}
-------------------------------------
Example, std::for_each

.std::for_each algorithm applies a function to each element in the iterator
sequence
.Functions must be provided to the algorithm as:
    -Functor (function object)
    -Function pointer
    -Lambda expression
.let's square each element:

Using a Functor: 

struct Square_Functor {
    void operator()(int x){      // overload () operator 
        std::cout << x*x << " ";
    }
};

Square_Functor square;
std::vector<int> vec{1,2,3,4};
std::for_each(vec.begin(), vec.end(), square); // 1 4 9 16


Using a Function Pointer:

void square(int x) {            // function 
    std::cout << x*x << " ";
}
std::vector<int> vec{1,2,3,4};
std::for_each(vec.begin(), vec.end(), square); // 1 4 9 16


Using a Lambda Expression:

std::vector<int> vec {1,2,3,4};

std::for_each(vec.begin(), vec.end(),
    [](int x) { std::cout << x*x << " "; });  // Lambda expression, 1 4 9 16
-----------------------------------------------------------------------------------------
Sequence Container - Arrays

std::array (C++11)
#include <array>

.Fixed size, size must be known at compile time 
.Direct element access
.Provides access to the underlying raw array
.Use instead of raw arrays when possible
.All iterators available and do not invalidate 

Initialization and Assignment:

std::array<int,5> arr1 { {1,2,3,4,5} };  // C++11 vs C++14, double curlies not needed

std::array<std::string,3> stooges {std::string{"Larry"},"Moe",std::string{"Curly"}};
arr1 = {2,4,6,8,10};
-------------------------------------
Common std::array methods:

std::array<int, 5> arr {1,2,3,4,5};

std::cout << arr.size();  // 5
std::cout << arr.at(0);   // 1     at includes bounds checking 
std::cout << arr[1];      // 2     no bounds checking 
std::cout << arr.front(); // 1
std::cout << arr.back();  // 5
std::cout << arr.empty(); // 0 (false)
std::cout << arr.max_size(); // 5
std::cout << arr.fill(10); // fills all to 10

std::array<int, 5> arr1 {10,20,30,40,50};
arr.swap(arr1);            // swaps the two arrays
int *data = arr.data();    // obtain raw array address 

*** en.cppreference.com ***
----------------------------------------------------------------------------------------




.Vector
.Deque
.List and Forward List
.Set and Multi Set
.Map and Multi Map
.Stack and Queue
.Priority Queue
.Algorithms
