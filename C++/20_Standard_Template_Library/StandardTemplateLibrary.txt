------------------------Standard Template Library--------------------------------------
What is the STL?

.A library of powerful, reusable, adaptable, generic classes and functions
.Implemented using C++ templates
.Implements common data structures and algorithms
.Huge class library
.Developed by Alexander Stepanov (1994)

.Assortment of commonly used containers
.Known time and size complexity
.Tried and tested - reusability!
.Consistent, fast, and type-safe
.Extensible

STL Components:

Containers
    -Collections of objects or primitive types 
    -array, vector, deque, stack, set, map, etc.
Algorithms
    -Functions for processing sequeneces of elements from containers
    -find, max, count, accumulate, sort, etc.
Iterators
    -Generate sequences of element from containers
    -forward, reverse, by value, by reference, constant, etc.
-----------------------------------
#include <vector>
#include <algorithm>

std::vector<int> v {1,5,3};

std::sort(v.begin(), v.end());
for (auto elem : v){                    // std::sort
    std::cout << elem << std::endl;     //  1   3   5
}

std::reverse(v.begin(), v.end());
for (auto elem : v){                    // std::reverse 
    std::cout << elem << std::endl;     //  5   3   1
}

int sum{};
sum = std::accumulate(v.begin(), v.end(), 0);   // std::accumulate
std::cout << sum << std::endl;                  // 9
------------------------------------
Sequence Containers
    -array, vector, list, forward_list, deque    Order is maintained
Associative Containers
    -set, multi set, map, multi map              Order is maintained or not 
Container Adapters
    -stack, queue, priority queue                Cannot be used w/ iterators 
------------------------------------
Input Iterators          - from the container to the program
Output Iterators         - from the program to the container
Forward Iterators        - navigate one item at a time in one direction 
Bi-directional Iterators - navigate one item at a time in both directions
Random Acess Iterators   - directly access a container item 
------------------------------------
.About 60 algorithms in the STL
.Non-modifying vs Modifying algos.   
---------------------------------------------------------------------------------------
Generic Programming / Meta-programming
    -pre-processor macros

.Generic Programming 
    -Writing code that works with a variety of types as arguments, as long as
those argument types meet specific syntactic and semantic requirements
.Can be handled using Macros ***(Legacy style, not optimal for modern C++)***

.C++ preprocessor directives
.No type information
.Simple substitution

#define MAX_SIZE 100
#define PI 3.14159

if (num > MAX_SIZE){             
    std::cout << "Too big";
}
double area = PI * r * r;

This is inferior to using constants!
-------------------------------------
int max(int a, int b) {
    return (a > b) ? a : b;
}
int x = 100;
int y = 200;
std::cout << max(x,y); 
-------------------------------------
#define MAX(a,b) ((a>b) ? a : b)

std::cout << MAX(10,20) << std::endl;
std::cout << MAX(2.4,3.5) << std::endl;
std::cout << MAX('A','C') << std::endl;
-------------------------------------
#define SQUARE(a) ((a)*(a))

result = SQUARE(5);
result = 5*5;          

result = 100/SQUARE(5);
result = 100/5*5;                    
---------------------------------------------------------------------------------------
-function templates
    
    
    
    



    
    -class templates

.STL Containers
.STL Iterators
.STL Algorithms 
.Array
.Vector
.Deque
.List and Forward List
.Set and Multi Set
.Map and Multi Map
.Stack and Queue
.Priority Queue
.Algorithms
