-------------------------Reading and Writing Text Files---------------------------------
Input files (fstream and ifstream)
.fstream and ifstream are commonly used for input files

1. #include <fstream>
2. Declare an fstream or ifstream object
3. Connect it to a file on your system (opens it for reading)
4. Read data from the file via the stream
5. Close the stream

std::fstream in_file {"../myfile.txt",
                        std::ios::in};

.Open for reading in binary mode
std::fstream in_file {"../myfile.txt",
                        std::ios::in | std::ios::binary}; // used when accessing binary
----------------------------------
.ifstream is used for input files only

std::ifstream in_file {"../myfile.txt",
                        std::ios::in};   // this is default

std::ifstream in_file {"../myfile.txt"}; // same behavior

std::ifstream in_file {"../myfile.txt",
                        std::ios::binary}; // used when accessing binary
-----------------------------------
std::ifstream in_file;
std::string filename;
std::cin >> filename;  // get the file name

in_file.open(filename);
        OR
in_file.open(filename, std::ios::binary);

if (in_file.is_open()){      // use is_open() method to return boolean
    // read from it
} else {
    // file could not be opened
    // does it exist? should the program terminate?
}

if (in_file){                // check directly if in_file is associated with an object
    // read from it
} else {
    // terminate, error, etc.
}
------------------------------------
Closing the File:
.Always close any open files to flush out any unwritten data

in_file.close();
------------------------------------
Reading from Files using >>

.We can use the extraction operator for formatted read 
.Same way we used it with cin

int num{};
double total{};
std::string name{};

int_file >> num;
int_file >> total >> name;
------------------------------------
getline() method: 

.We can use getline to read the file one line at a time

std::string line{};    // This is a line
std::getline(in_file, line);
------------------------------------
Example 1:

std::ifstream in_file{"../myfile.txt"};           // open file
std::string line{};                               // create empty string to write to

if (!in_file){                                    // check if file is open
    std::cerr << "File open error" << std::endl;  // if not, print error message
    return 1;      // exit the program (main)     // terminate program 
}
while (!in_file.eof()){                           // while not at the end using .eof()
    std::getline(in_file, line);                  // read and copy text to string line
    std::cout << line << std::endl;               // print string line 
}
in_file.close();                                  // close the file 
---------------------------------------
Example 2:

std::ifstream in_file{"../myfile.txt"};           // open file
std::string line{};                               // create empty string to write to

if (!in_file){                                    // check if file is open
    std::cerr << "File open error" << std::endl;  // if not, print error message
    return 1;      // exit the program (main)     // terminate program 
}
while (std::getline(in_file, line)){  // while in_file contains text, copy to string line
    std::cout << line << std::endl;   // print string line 
}
in_file.close();                                  // close the file 
---------------------------------------
Example 3:  (unformatted style, 1 character at a time)

std::ifstream in_file{"../myfile.txt"};           // open file
char c;

if (!in_file){                                    // check if file is open
    std::cerr << "File open error" << std::endl;  // if not, print error message
    return 1;      // exit the program (main)     // terminate program 
}
while (in_file.get(c)){
    std::cout << c;
}
in_file.close();                                  // close the file 
---------------------------------------------------------------------------------------
Output Files (fstream and ofstream)

1. #include <fstream>
2. Declare an fstream or ofstream object
3. Connect it to a file on your file system (opens it for writing)
4. Write data to the file via the stream
5. Close the stream 

.Output files will be created if they don't exist
.Output files will be overwritten (truncated) by default
.Can be opened so that new writes append
.Can be opened in text or binary modes 
---------------------------------------
std::fstream out_file {"../myfile.txt",
                        std::ios::out};
std::fstream out_file {"../myfile.txt",
                        std::ios::out | std::ios::binary};
---------------------------------------
std::ofstream out_file {"../myfile.txt",
                        std::ios::out};
std::ofstream out_file {"../myfile.txt"}; // text is default 
std::ofstream out_file {"../myfile.txt",
                        std::ios::binary};
---------------------------------------
std::ofstream out_file {"../myfile.txt",
                        std::ios::trunc};  // truncate (discard contents) when opening
std::ofstream out_file {"../myfile.txt",
                        std::ios::app};    // append on each write
std::ofstream out_file {"../myfile.txt",
                        std::ios::ate};    // seek to end of stream when opening 
---------------------------------------

std::ofstream out_file;
std::string filename;
std::cin >> filename;

out_file.open(filename);  OR  out_file.open(filename, std::ios::binary);

if (out_file) {
    // read from it
}
else {
    // file could not be created or opened
    // does it exist? should the program terminate?
}

out_file.close();
-----------------------------------------
Example 1:  .We can use the insertion operator for formatted write

int num{100};
double total{255.67};
std::string name{"Ben"};

out_file << num   << "\n"
         << total << "\n"
         << name  << std::endl;
------------------------------------------
Example 2: Copying a text file one line at a time

std::ifstream in_file {"../myfile.txt"};  // open file to read
std::ofstream out_file {"../copy.txt"};   // open file to write 

if (!in_file){
    std::cerr << "File open error" << std::endl;
    return 1;
}
if (!out_file){
    std::cerr << "File create error" << std::endl;
    return 1;
}
-------------------------------------------
std::string line{};

while (std::getline(in_file,line)) {
    out_file << line << std::endl;      // formatted copy by std::string
}

in_file.close();
out_file.close();
--------------------------------------------
char c;

while (in_file.get(c)){
    out_file.put(c);                   // unformatted copy by individual characters 
}

in_file.close();
out_file.close();
----------------------------------------------------------------------------------------
Using String Streams

.Allows us to read or write from strings in memory much as we would read and write to
files
.Very powerful and useful for data validation

classes: stringgstream, istringstream, ostringstream

1. #include <sstream>
2. Declare a stringgstream, istringstream or ostringstream object
3. Connect it to a std::string
4. Read/write data from/to the string stream using formatted I/O
----------------------------------------------
#include <sstream>    Read from string

int num{};
double total{};
std::string name{};
std::string info {"Moe 100 1234.5"};

std::istringstream iss{info};
iss >> name >> num >> total;
----------------------------------------------
#include <sstream>    Write to string

int num{100};
double total{1234.5};
std::string name{"Ben"};

std::ostringstream oss{};
oss << name << " " << num << " " << total;
std::cout << oss.str() << std::endl;
----------------------------------------------
Validating input with stringstream

int value{};
std::string input{};

std::cout << "Enter an integer: ";
std::cin >> input;

std::stringgstream ss{input};
if (ss >> value) {
    std::cout << "An integer was entered" << std::endl;
}
else {
    std::cout << "An integer was NOT entered" << std::endl;
}
---------------------------------------------------------------------------------------
File Locations and IDEs

           IDE            |              File Path
-----------------------------------------------------------------
CodeLite                  | std::ifstream in_file {"test.txt"};
Windows Visual Studio Code| std::ifstream in_file {"test.txt"};
Code::Blocks              | std::ifstream in_file {"test.txt"};
CLion                     | std::ifstream in_file {"../test.txt"};
Xcode                     | std::ifstream in_file {"test.txt"};   // see extra steps 


