---------------------------------- I / O Streams --------------------------------------
Streams and I/O

.C++ uses streams as an interface between the program and input/output devices
.Independent of the actual device
.Sequence of bytes
.Input stream provides data to the program
.Out stream receives data from the program 

Input Device ---> Input Stream[9] --->
                                       |
                                       Program
Output Device <--- Output Stream[9] <--|
-----------------------------------
Common Header Files

<iostream> - Provides definitions for formatted input and output to/from streams
<fstream>  - Provides definitions for formatted input and output to/from file streams
<iomanip>  - Provides definitions for manipulators used to format stream I/O
-----------------------------------
Commonly Used Stream Classes

Class:   
----------------
 ios           | Provides basic support for formatted and unformatted I/O ops. Base class
 ifstream      | Provides high-level input operations on file based streams
 ofstream      | Provides high-level output operations on file based streams 
 fstream       | Provides for high-level I/O operatons on file based streams. 
 stringstream  | Provides for high-level I/O operatons on memory based streams.
------------------------------------
Global Stream Objects

std::cin   | Standard input stream - 
By default 'connected' to the standard input device (keyboard). Instance of istream

std::cout  | Standard output stream -
By default 'connected' to the standard output device (console). Instance of ostream

std::cerr  | Standard error stream -
By default 'connected' to the standard error device (console). 
Instance of ostream (unbuffered)

std:clog   | Standard log stream -
By default 'connected' to the standard log device (console).
Instance of ostream (unbuffered)

.Global objects, initialized before main executes
.Best practice is to use cerr for error messages and clog for log messages 
---------------------------------------------------------------------------------------
Stream Manipulators

.Streams have useful member functions to control formatting
.Can be used on input and output streams
.The time of the effect on the stream varies
.Can be used as member functions or as a manipulator
    std::cout.width(10);         // member function
    std::cout << std::setw(10);  // manipulator 
----------------------------
.Boolean manipulators
    -boolalpha, noboolalpha

.By default, boolean values are displayed as 1 or 0
.Sometimes, the strings true or false are more appropriate 

std::cout << (10 == 10) << std::endl;    // 1
std::cout << (10 == 20) << std::endl;    // 0

VS.

std::cout << std::boolalpha;
std::cout << (10 == 10) << std::endl;   // true
std::cout << (10 == 20) << std::endl;   // false 

.Once we set with boolalpha or noboolalpha, ALL further boolean output will be
affected. We can toggle back and forth with:
    std::cout << std::noboolalpha;
    std::cout << std::boolalpha;

Method version:
    std::cout.setf(std::ios::boolalpha);
    std::cout.setf(std::ios::noboolalpha);
Reset to default:
    std::cout << std::resetiosflags(std::ios::boolalpha);
---------------------------------------------------------------------------------------
.Integer manipulators
    -dec, hex, oct, showbase, noshowbase, showpos, noshowpos, uppercase, nouppercase

.By default:
    -integers are displayed in dec (base 10)
    -noshowbase - prefix used to show hexadecimal or octal
    -nouppercase - when displaying a prefix and hex values it will be lower case
    -noshowpos -  no '+' is displayed for positive numbers
.These manipulators affect all further output to the stream

int num{255};

std::cout << std::dec << num << std::endl;  // 255
std::cout << std::hex << num << std::endl;  // ff
std::cout << std::oct << num << std::endl;  // 277

VS.

int num{255};

std::cout << std::showbase;
std::cout << std::dec << num << std::endl;  // 255
std::cout << std::hex << num << std::endl;  // 0xff - 0x prefix for hexadecimal
std::cout << std::oct << num << std::endl;  // 0377 - 0 prefix for octal 
---------------------------
std::cout << std::showbase << std::uppercase;
std::cout << std::hex << num << std::endl;    // 0XFF
---------------------------
int num1{255};
int num2{-255};

std::cout << num1 << std::endl;  // 255
std::cout << num2 << std::endl;  // -255

std::cout << std::showpos;

std::cout << num1 << std::endl;  // +255
std::cout << num2 << std::endl;  // -255
----------------------------
Set using setf
    std::cout.setf(std::ios::showbase);
    std::cout.setf(std::ios::uppercase);
    std::cout.setf(std::ios::showpos);
Reset to defaults
    std::cout << std::resetiosflags(std::ios::basefield);
    std::cout << std::resetiosflags(std::ios::showbase;
    std::cout << std::resetiosflags(std::ios::showpos);
    std::cout << std::resetiosflags(std::ios::uppercase);
---------------------------------------------------------------------------------------
.Floating Point manipulators
    -fixed, scientific, setprecision, showpoint, noshowpoint, showpos, noshowpos

.Default when displaying floating point values is:
    -setprecision  | Number of digits displayed (6)
    -fixed         | Not fixed to a specific number of digits after the decimal point
    -noshowpoint   | Trailing zeroes are not displayed
    -nouppercase   | When displaying in scientific notation
    -noshowpos     | No '+' is displayed for positive numbers 
.These manipulators affect all further output to the stream

double num{1234.5678};
std::cout << num << std::endl;  // by default, 1234.57 | precision is 6 w/ rounding

double num{123456789.987654321};
std::cout << num << std::endl;  // by default, 1.23457e+008 | precision 6 w/ sci notation
------------------------------
double num{123456789.987654321};
std::cout << std::setprecision(9);
std::cout << num << std::endl;  // 123456790 | precision 9 w/ rounding 
------------------------------
double num{123456789.987654321};
std::cout << std::fixed;
std::cout << num << std::endl;  // 123456789.987654 | sets precision of 6 decimal digits

std::cout << std::setprecision(3) << std::fixed; // 123456789.988 
------------------------------
double num{123456789.987654321};
std::cout << std::setprecision(3) << std::scientific;
std::cout << num << std::endl;  // 1.23e+008

std::cout << std::uppercase << num << std::endl;  // 1.23E+008  
------------------------------
double num{123456789.987654321};
std::cout << std::setprecision(3) << std::fixed << std::showpos;
std::cout << num << std::endl;  // +123456789.988
    to cancel, use std::noshowpos
------------------------------
double num{12.34};
std::cout << num << std::endl;   // 12.34
std::cout << std::showpoint;
std::cout << num << std::endl;   // 12.3400  | trailing zeroes up to precision
------------------------------
.unsetf
    std::cout.unsetf(std::ios::scientific | std::ios::fixed);
OR
    std::cout << std::resetiosflags(std::ios::floatfield);
---------------------------------------------------------------------------------------
.Field Width, Justification and Fill manipulators
    -setw, left, right, internal, setfill

.By default, when displaying floating point values:
    -setw  | not set by default
    -left  | when no field width
    -right | when using field width
    -fill  | not set by default, blank space is used 
.Some of these manipulators affect only the next data element put on the stream**

double num{1234.5678};
std::string hello{"Hello"};

std::cout << num << hello << std::endl; // 1234.57Hello
-----------------------------
std::cout << std::setw(10) << num << hello << std::endl;

12345678901234567890   // behind the scenes, width units
   1234.57Hello        // aligns end of num (7) with width unit 10
-----------------------------
std::cout << std::setw(10) << num 
    << std::setw(10) << hello 
    << std::setw(10) << hello << std::endl;

12345678901234567890123456789012345678901234567890
   1234.57     Hello     Hello     // aligns end of each num and hello with width 10
------------------------------
std::cout << std::setw(10) << std::left << num 
    << hello << std::endl;          // Only affects num!

12345678901234567890123456789012345678901234567890
1234.57   Hello     // num is left aligned, width takes up 10. Hello begins in space 11
------------------------------
std::cout << std::setw(10) << num
    << std::setw(10) << hello 
    << std::setw(15) << hello << std::endl;

12345678901234567890123456789012345678901234567890
   1234.57     Hello          Hello  // R-aligned with w10, w10 and w15
-------------------------------
std::cout << std::setfill('-');
std::cout << std::setw(10) << num << hello << std::endl;

12345678901234567890123456789012345678901234567890
---1234.57Hello
-------------------------------
std::cout << std::setfill('*') << std::setw(10) << num
    << std::setfill('-') << std::setw(10) << hello
    << std::setw(15) << hello << std::endl;

12345678901234567890123456789012345678901234567890
***1234.57-----Hello----------Hello
---------------------------------------------------------------------------------------

.Other manipulators
    -endl, flush, skipws, noskipws, ws


.Reading and Writing to a Text File 
.Using string streams 