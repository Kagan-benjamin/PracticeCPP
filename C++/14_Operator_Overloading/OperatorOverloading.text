-------------Operator Overloading----------------------------

What is Operator Overloading?

.Using traditional operators such as +,=,*,etc. with user-defined types
.Allows user-defined types to behave similar to built-in types
.Can make code more readable and writable
.Not done automatically (except for the assignent operator), must be explicitly 
defined
----------------------------
Suppose we have a Number class that models any number

.Using functions:
    Number result = multiply(add(a,b), divide(c,d));
.Using member methods:
    Number result = (a.add(b)).multiply(c.divide(d));

.Using overloaded operators:
    Number result = (a+b)*(c/d);    // syntactic sugar

Which operators can be overloaded?
    -The majority of C++ operators can be overloaded
    -The operators cannot be overloaded:   :: | :? | .* | . | sizeof

Some basic rules:
    -Precedence and Associativity of the operators cannot be changed
    -The 'arity' cannot be changed (ie cannot make the division operator unary)
    -Can't overload operators for primitive type (int, double, etc.)
    -Can't create new operators 
    -[], (), ->, and = MUST be declared as member methods 
    -Other operators can be declared as member methods or global functions 
---------------------------------
Examples:

.int                    .std::string
a = b + c;              s1 = s2 + s3;
a < b;                  s1 < s2;
std::cout << a;         std::cout << s1;

.double                 .Mystring
a = b + c;              s1 = s2 + s3;
a < b;                  s1 < s2;
std::cout << a;         s1 == s2;
                        std::cout << s1;
.long                   
a = b + c;              .Player
a < b;                  p1 < p2;
std::cout << a;         p1 == p2;
                        std::cout << p1;
-----------------------------

class Mystring{
private:    
    char *str;   // C-style string 
public:
    Mystring();
    Mystring(const char *s);
    Mystring(const Mystring &source);
    ~Mystring();
    
    void display() const;
    int get_length() const;
    const char *get_str() const;
};
---------------------------------------------------------------------------------------
Overloading the assignment operator (=) Copy Semantics:

.C++ provides a default assignment operator used for assigning one object to another 

Mystring s1{"Frank"};
Mystring s2 = s1;   // NOT assignment, same as Mystring s2{s1};
s2 = s1;            // Assignment 

.Default is memberwise assignment (shallow copy)
    -If we have a raw pointer data member, we must perform a deep copy  

Type &Type::operator=(const Type &rhs);

Mystring &Mystring::operator=(const Mystring &rhs){
    if (this == &rhs){   
        return *this;       // p1 = p1? check for self assignment 
    }
    delete[] str;           // we need to deallocate storage for this->str
    str = new char[std::strlen(rhs.str)+1];   // since we are overwriting it 
    std::strcpy(str, rhs.str);               // perform the copy
    return *this                     // return left-side object 
}                          // s1 = s2 = s3;

s2 = s1;           // we write this
s2.operator=(s1);  // compiler converts to operator= method
---------------------------------------------------------------------------------------
Overloading the assignment operator (=) Move Semantics:

.You can choose to overload the move assignment operator
    -C++ will use the copy assignment operator if necessary

Mystring s1;
s1 = Mystring{"Frank"}; 

.If we have raw pointers, we should overload the move assignment operator for
efficiency 
-------------------------
Type &Type::operator=(Type &&rhs);

Mystring &Mystring::operator=(Mystring &&rhs);
s1 = Mystring{"Joe"};  // move operator called
s1 = "Frank";          // move operator called 

Mystring &Mystring::operator=(Mystring &&rhs){
    if (this == &rhs){        // if self assignment
        return *this;         // return current object
    }
    delete[] str;      // deallocate current storage
    str = rhs.str;     // steal the pointer
    rhs.str = nullptr; // null out the rhs object
    return *this;      // return current object  
}
---------------------------------------------------------------------------------------
Overloading Operators as Member Functions:

.Unary operators as member methods (++,--,-,!)

ReturnType Type::operator[Op]();

Number Number::operator-() const;
Number Number::operator++();        // pre-increment
Number Number::operator++(int);     // post-increment 
bool Number::operator!() const;

Number n1{100};
Number n2 = -n1;       // n1.operator-()
n2 = ++n1;             // n1.operator++()
n2 = n1++;             // n1.operator++(int)
-----------------------------

Mystring larry1 {"LARRY"};
Mystring larry2;

larry1.display();    // LARRY
larry2 = -larry1;    // larry1.operator-()

larry1.display();    // LARRY
larry2.display();    // larry 

Mystring Mystring::operator-() const {
    char *buff = new char[std::strlen(str)+1];
    std::strcpy(buff, str);
    for (size_t i{0}; i < std::strlen(buff); i++){
        buff[i] = std::tolower(buff[i]);
    }
    Mystring temp{buff};
    delete[] buff;
    return temp;
}
-----------------------------
Binary Operators as member methods(+,-,==,!=,<,>,etc.)

ReturnType Type::operatorOp(const &Type rhs);

Number Number::operator+(const &Number rhs) const;
Number Number::operator-(const &Number rhs) const;
Number Number::operator==(const &Number rhs) const;
Number Number::operator<(const &Number rhs) const;

Number n1{100}, n2{200};
Number n3 = n1 + n2;          // n1.operator+(n2)
n3 = n1 - n2;                 // n1.operator-(n2)
if (n1 == n2) ....;           // n1.operator==(n2)

bool Mystring::operator==(const Mystring &rhs) const {
    if (std::strcmp(str, rhs.str) == 0){
        return true;
    }
    else {
        return false;
    }
}
if (s1 == s2)   // s1 and s2 are both Mystring objects
-----------------------------
Mystring operator+ (concatenation)

Mystring larry{"Larry"};
Mystring moe{"Moe"};
Mystring stooges {" is one of the three stooges"};

Mystring result = larry + stooges;  // larry.operator+(stooges);
result = moe + " is also a stooge"; // moe.operator+(" is also a stooge");
result = "Moe" + stooges;      // "Moe".operator+(stooges) ERROR

1. Allocate a character buffer large enough to hold both strings + 1 for string term.
2. Allocate this buffer dynamically on the heap
3. Copy lhs string over to buffer 
4. Concatenate rhs.str with buffer 
5. Create the new object that will contain the concatenated string using buffer as 
the initializer
6. Deallocate the local buffer area so we don't leak memory
7. Return the new object

Mystring Mystring::operator+(const Mystring &rhs) const {
    size_t buff_size = std::strlen(str) + std::strlen(rhs.str) + 1;
    char *buff = new char[buff_size];
    std::strcpy(buff,str);
    std::strcat(buff,rhs.str);
    Mystring temp{buff};
    delete[] buff;
    return temp;       // return by value
}
---------------------------------------------------------------------------------------
Overloading Operators As Global Functions:

.Unary operators as global functions (++, --, -, !):

ReturnType operatorOp(Type &obj);

Number operator-(const Number &obj);
Number operator++(Number &obj);        // pre-increment
Number operator++(Number &obj, int);   // post-increment
bool operator!(const Number &obj);

Number n1{100};
Number n2 = -n1;    // operator-(n1)
n2 = ++n1;          // operator++(n1)
n2 = n1++;          // operator++(n1, int)
------------------------------

Mystring ben1 {"BEN"};
Mystring ben2;
ben1.display();  // BEN
ben2 = -ben1;    // operator-(ben1)
ben1.display();  // BEN
ben2.display();  // ben

.Often declared as FRIEND functions in the class declaration

Mystring operator-(const Mystring &obj){
    char *buff = new char[std::strlen(obj.str)+1];
    std::strcpy(buff, obj.str);
    for (size_t i{0}; i < std::strlen(buff); i++){
        buff[i] = std::tolower(buff[i]);
    }
    Mystring temp{buff};
    delete[] buff;
    return temp;
}
--------------------------------
Binary operators as global functions (+,-,==,!=,<,>,etc.):

ReturnType operatorOp(const &Type lhs, const &Type rhs);

Number operator+(const &Number lhs, const &Number rhs);
Number operator-(const &Number lhs, const &Number rhs);
bool operator==(const &Number lhs, const &Number rhs);
bool operator<(const &Number lhs, const &Number rhs);

Number n1{100}, n2{200};
Number n3 = n1 + n2;       // operator+(n1,n2)
n3 = n1 - n2;              // operator-(n1,n2)
if (n1 == n2)...           // operator==(n1,n2)

bool operator==(const Mystring &lhs, const Mystring &rhs){
    if (std::strcmp(lhs.str, rhs.str) == 0){
        return true;
    } else {
        return false;
    }
}
.If declared as a friend of Mystring, can access private str attribute
.Otherwise, must use getter methods 

Mystring operator+(const Mystring &lhs, const Mystring &rhs){
    size_t buff_size = std::strlen(lhs.str) + std::strlen(rhs.str) + 1;
    char *buff = new char[buff_size];
    std::strcpy(buff, lhs.str);
    std::strcat(buff, rhs.str);
    Mystring temp{buff};
    delete[] buff;
    return temp;
}
---------------------------------------------------------------------------------------





Overloading stream insertion (<<) and extraction (>>) operators

