----------------------------Inheritance--------------------------------------------
What is inheritance and why is it useful?
    -Provides a method for creating new classes from existing classes
    -The new class contains the data and behaviors of the existing class
    -Allow for reuse of existing classes
    -Allows us to focus on the common attributes among a set of classes
    -Allows new classes to modify behaviors of existing classes to make it unique
    -Does not actually modify the original class

Related classes:
.Player, Enemy, Boss, Hero, Super_player, etc.
.Account, Savings Account, Checking Account, Trust Account, etc.
.Shape, Line, Oval, Circle, Square, etc.
.Person, Employee, Student, Faculty, Staff, Administrator, etc.

.Account: balance, deposit, withdraw
    -Savings Account: balance, deposit, withdraw, interest rate...
    -Checking Account: balance, deposit, withdraw, min balance, per check fee...
    -Trust Account:   balance, deposit, withdraw, interest rate...

Inheritance with accounts:

class Account {
    // balance, deposit, withdraw
};

class Savings_Account : public Account {
    // interest rate, specialized withdraw...
};

class Checking_Account : public Account {
    // min balance, per check fee, specialized withdraw...
};

class Trust_Account : public Account {
    // interest rate, specialized withdraw...
};
--------------------------------------------------------------------------------------
Terminology and Notation

.Inheritance
    -Process of creating new classes from existing classes
    -Reuse mechanism
.Single Inheritance
    -A new class is created from another 'single' class
.Multiple Inheritance
    -A new class is created from two (or more) other classes 

    Base <------------------------------------ Derived
.Base class (parent, super)               .Derived class (child, sub)
.The class being extended        .Inherits attributes and operations from base class

."Is-A" relationship
    -Public inheritance
    -Derived classes are sub-types of their Base classes
    -Can use a derived class object wherever we use a base class object
.Generalization
    -Combining similar classes into a single, more general class based on 
    common attributes
.Specialization
    -Creating new classes from existing classes providing more specialized 
    attributes or operations
.Inheritance or Class Hierarchies
    -Organization of our inheritance relationships

Generalization /\        A         |                      Classes: 
               |         ^         |                      .A                 
               |    B----|----C    |                      .B is derived from A
               |              ^    |                      .C is derived from A
               |              |    |                      .D is derived from C
               |              D    |                      .E is derived from D
               |              ^    |
               |              |    |  
               |              E    \/ Specialization
                            

                            Person                   Classes:
                              /\                     .Student is derived from Person
                               |                     .Employee is derived from Person
                   Employee----|----Student          .Faculty is derived from Employee 
                      /\                             .Admin is derived from Employee
                       |                             .Staff is derived from Employee
            Faculty----|----Administrator
                       |
                     Staff
--------------------------------------------------------------------------------------
Inheritance vs Composition

.Both allow reuse of existing classes
.Public Inheritance
    -"is-a" relationship
        -Employee "is-a" Person
        -Checking_Account "is-a" Account
        -Circle "is-a" Shape
.Composition
    -"has-a" relationship
        -Person "has-a" Account
        -Player "has-a" Special Attack
        -Circle "has-a" Location

class Person {     // Composition example
private:
    std::string name;  // has-a name
    Account account;   // has-a account
};
--------------------------------------------------------------------------------------
Deriving Classes from Existing Classes

class Base {
    // Base class members...
};

class Derived : ACCESS-SPECIFIED Base {
    // Derived class members...
};

.Access-specifier can be: public, private or protected. Defaults to private.
.Public:
    -most common
    -establishes 'is-a' relationship between Derived and Base classes
.Private:
    -establishes 'derived class HAS-A base class' relationship
    -'is implemented in terms of' relationship
    -different from Composition
---------------------------------------
class Account {
    // Account class members...
};
                                              // Savings_Account 'is-a' Account
class Savings_Account : public Account {
    // Savings_Account class members...
};

Account account{};
Account *p_account = new Account();
account.deposit(1000.0);
p_account->withdraw(200.0);
delete p_account;

Savings_Account sav_account{};
Savings_Account *p_sav_account = new Savings_Account();
sav_account.deposit(1000.0);
p_sav_account->withdraw(200.0);
delete p_sav_account;
--------------------------------------------------------------------------------------
Protected Members and Class Access

class Base {
protected:
    // protected Base class members...
};

.Accessible from the Base class itself
.Accessible from classes derived from the Base class
.Not accessible by objects of Base or Derived classes

class Base {           Base Class     |     Access in Derived Class    [PUBLIC] 
public:               ----------------------------------------------
    int a;             public:    a   |       public:    a
protected:             protected: b   |       protected: b
    int b;             private:   c   |       c - NO ACCESS
private:
    int c;
};
                       Base Class     |     Access in Derived Class    [PROTECTED] 
                      ----------------------------------------------
                       public:    a   |       protected: a
                       protected: b   |       protected: b
                       private:   c   |       c - NO ACCESS

                       Base Class     |     Access in Derived Class    [PRIVATE] 
                      ----------------------------------------------
                       public:    a   |       private: a
                       protected: b   |       private: b
                       private:   c   |       c - NO ACCESS
--------------------------------------------------------------------------------------
Inheritance Constructors and Destructors

.A Derived class inherits from its Base class
.The Base part of the Derived class MUST be initialized BEFORE the Derived class
is initialized
.When a Derived object is created:
    -Base class constructor executes, then
    -Derived class constructor executes
------------------------------
Constructors:

class Base {
public:
    Base(){ std::cout << "Base Constructor" << std::endl; }
};

class Derived : public Base {
public:
    Derived() { std::cout << "Derived Constructor" << std::endl; }
};

Base base;       // Base Constructor invoked
Derived derived; // Base Constructor invoked, then Derived Constructor invoked
--------------------------------
Destructors:

.Class destructors are invoked in the reverse order as constructors
.The Derived part of the Derived class MUST be destroyed BEFORE the Base
class destructor is invoked
.When a Derived object is destroyed:
    -Derived class destructor executes, then
    -Base class destructor executes
    -Each destructor should free resources allocated in it's own constructors 

class Base {
public:
    Base(){ std::cout << "Base Constructor" << std::endl; }
    ~Base(){ std::cout << "Base Destructor" << std::endl; }
};

class Derived : public Base {
public:
    Derived() { std::cout << "Derived Constructor" << std::endl; }
    ~Derived(){ std::cout << "Derived Destructor" << std::endl; }
};

Base base;       // Base Constructor -> Base Destructor

Derived derived; // Base Constructor -> Derived Constructor,
                 // then Derived Destructor -> Base Destructor
---------------------------------
.A Derived class does NOT inherit:
    -Base class constructors
    -Base class destructor
    -Base class overloaded assignment operators
    -Base class friend functions
.However, the base class constructors, destructors and overloaded assignment operators
can invoke the base-class versions
.C++11 allows explicit inheritance of base 'non-special' constructors with:
    -using Base::Base;  // anywhere in the derived class declaration
    -Lots of rules involved, often better to define constructors yourself
--------------------------------------------------------------------------------------    
Passing Arguments to Base Class Constructors:

.The Base part of a Derived class must be initialized first 
.How can we control exactly which Base class constructor is used during initialization?
.We can invoke the Base class constructor that we need in the 
initialization list of the Derived class

class Base {
private:
    int value;
public:
    Base() : value{0} {
        cout << "Base no-args constructor" << endl;
    }
    Base(int x) : value{x} {
        cout << "Base overloaded (int) constructor" << endl;
    }
};

class Derived : public Base {
private:
    int doubled_value;
public:
    Derived() : Base{}, doubled_value{0} {
        cout << "Derived no-args constructor" << endl;
    }
    Derived(int x) : Base{x}, doubled_value{x*2} {
        cout << "Derived overloaded (int) constructor" << endl;
    }
};

Constructor/Destructor calls --

                          Output:
Base base;             .Base no-args constructor
Base base{100};        .Base overladed (int) constructor
Derived derived;       .Base no-args constructor -> Derived no-args constructor
Derived derived{100};  .Base overloaded (int) constructor -> Derived overloaded const 

// using delegation:
Derived::Derived(int x)
    : Base(x), {optional initializers for Derived}{
        // code 
}
--------------------------------------------------------------------------------------   
Copy/Move Constructors and operator= with Derived Classes

.Not inherited from the Base class
.You may not need to provide your own
    -Compiler-provided versions may work fine
.We can explicitly invoke the Base class versions from the Derived class
------------------------------
Copy Constructor:
    .Can invoke Base copy constructor explicitly
    .Derived object 'other' will be sliced

Derived::Derived(const Derived &other)
    : Base(other), {Derived initialization list} {
        // code
}

class Base {
private:
    int value;
public:
    Base() : value{0} {
        cout << "Base no-args constructor" << endl;
    }
    Base(int x) : value{x} {
        cout << "Base overloaded (int) constructor" << endl;
    }

    Base(const Base &other) : value{other.value} {
        cout << "Base copy constructor" << endl;      // Copy Constructor
    }
    Base &operator=(const Base &rhs) {                // Assignment Operator
        if (this != &rhs){
            value = rhs.value;
        }
        return *this;
    }

};
    
class Derived : public Base {
private:
    int doubled_value;
public:
    Derived() : Base{}, doubled_value{0} {
        cout << "Derived no-args constructor" << endl;
    }
    Derived(int x) : Base{x}, doubled_value{x*2} {
        cout << "Derived overloaded (int) constructor" << endl;
    }

    Derived(const Derived &other)
        : Base(other), doubled_value{other.doubled_value} {     // Copy Constructor
            cout << "Derived copy constructor" << endl;
    }
    Derived &operator=(const Derived &rhs) {
        if (this != &rhs){                                      // Assignment Operator
            Base::operator=(rhs);          
            doubled_value = rhs.doubled_value;
        }
        return *this;
    }
};
------------------------------
.If you DO NOT define copy/move/overloaded assignment in Derived classes explicitly:
    -The compiler will create them automatically and call the base class' version
.If you DO provide Derived versions:
    -Then YOU must invoke the Base versions explicitly
.Be careful with raw pointers *********
     -Especially if Base and Derived each have raw pointers
    -Provide them with deep copy semantics
---------------------------------------------------------------------------------------
Redefining Base Class Methods

.Derived class can directly invoke Base class methods
.Derived class can OVERRIDE or REDEFINE Base class methods
.Very powerful in the context of polymorphism

class Account {
public:
    void deposit(double amount) { balance += amount; }
};

class Savings_Account: public Account {
public:
    void deposit(double amount) {    // REDEFINITION of Base class method
        amount += some_interest;
        Account::deposit(amount);    // Invocation of Base class method 
    }
};
-------------------------------
Static Binding of Method Calls

.Binding of which method to use is done at compile time:
    -Default binding for C++ is static
    -Derived class objects will use Derived::deposit
    -But, we can explicitly invoke Base::deposit from Derived::deposit
    -This is ok but limited, a much more powerful approach is DYNAMIC BINDING

Base b;
b.deposit(1000.0)    // invokes Base::deposit

Derived d;
d.deposit(1000.0)    // invokes Derived::deposit

Base *ptr = new Derived();     // Base::deposit, compiler sees Base designation
ptr->deposit(1000.0);          // for the pointer. not dynamic, may want access to
                               // Derived::deposit since the new object is a Derived
---------------------------------------------------------------------------------------
Multiple Inheritance

.A Derived class inherits from two or more Base classes at the same time
.The Base classes may belong to unrelated class hierarchies

.A Department_Chair:                           Person
    -is-a Faculty AND                            /\
    -is-a Administrator                          |
                                    Employee --------- Student
                                        /\
                                        |
                      Faculty ---- Administrator ---- Staff
                         /\             /\
                         |              |
                         ----------------
                                |
                         Department_Chair 
                        
Employee + Student 'is-a' Person
Faculty, Administrator + Staff 'is-a' Employee, which 'is-a' Person
Department_Chair 'is-a' Faculty AND 'is-a' Administrator

Department_Chair inherits: Person->Employee->Faculty&Administrator->Department_Chair

class Department_Chair : public Faculty, public Administrator {
    ...
};

.Beyond the scope of this course
.Some compelling use-cases, but easily misused and can be very complex
---------------------------------------------------------------------------------------
