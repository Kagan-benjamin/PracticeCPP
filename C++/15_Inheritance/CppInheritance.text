----------------------------Inheritance--------------------------------------------
What is inheritance and why is it useful?
    -Provides a method for creating new classes from existing classes
    -The new class contains the data and behaviors of the existing class
    -Allow for reuse of existing classes
    -Allows us to focus on the common attributes among a set of classes
    -Allows new classes to modify behaviors of existing classes to make it unique
    -Does not actually modify the original class

Related classes:
.Player, Enemy, Boss, Hero, Super_player, etc.
.Account, Savings Account, Checking Account, Trust Account, etc.
.Shape, Line, Oval, Circle, Square, etc.
.Person, Employee, Student, Faculty, Staff, Administrator, etc.

.Account: balance, deposit, withdraw
    -Savings Account: balance, deposit, withdraw, interest rate...
    -Checking Account: balance, deposit, withdraw, min balance, per check fee...
    -Trust Account:   balance, deposit, withdraw, interest rate...

Inheritance with accounts:

class Account {
    // balance, deposit, withdraw
};

class Savings_Account : public Account {
    // interest rate, specialized withdraw...
};

class Checking_Account : public Account {
    // min balance, per check fee, specialized withdraw...
};

class Trust_Account : public Account {
    // interest rate, specialized withdraw...
};
--------------------------------------------------------------------------------------
Terminology and Notation

.Inheritance
    -Process of creating new classes from existing classes
    -Reuse mechanism
.Single Inheritance
    -A new class is created from another 'single' class
.Multiple Inheritance
    -A new class is created from two (or more) other classes 

    Base <------------------------------------ Derived
.Base class (parent, super)               .Derived class (child, sub)
.The class being extended        .Inherits attributes and operations from base class

."Is-A" relationship
    -Public inheritance
    -Derived classes are sub-types of their Base classes
    -Can use a derived class object wherever we use a base class object
.Generalization
    -Combining similar classes into a single, more general class based on 
    common attributes
.Specialization
    -Creating new classes from existing classes providing more specialized 
    attributes or operations
.Inheritance or Class Hierarchies
    -Organization of our inheritance relationships

Generalization /\        A         |                      Classes: 
               |         ^         |                      .A                 
               |    B----|----C    |                      .B is derived from A
               |              ^    |                      .C is derived from A
               |              |    |                      .D is derived from C
               |              D    |                      .E is derived from D
               |              ^    |
               |              |    |  
               |              E    \/ Specialization
                            

                            Person                   Classes:
                              /\                     .Student is derived from Person
                               |                     .Employee is derived from Person
                   Employee----|----Student          .Faculty is derived from Employee 
                      /\                             .Admin is derived from Employee
                       |                             .Staff is derived from Employee
            Faculty----|----Administrator
                       |
                     Staff
--------------------------------------------------------------------------------------
Inheritance vs Composition

.Both allow reuse of existing classes
.Public Inheritance
    -"is-a" relationship
        -Employee "is-a" Person
        -Checking_Account "is-a" Account
        -Circle "is-a" Shape
.Composition
    -"has-a" relationship
        -Person "has-a" Account
        -Player "has-a" Special Attack
        -Circle "has-a" Location

class Person {     // Composition example
private:
    std::string name;  // has-a name
    Account account;   // has-a account
};
--------------------------------------------------------------------------------------
Deriving Classes from Existing Classes

class Base {
    // Base class members...
};

class Derived : ACCESS-SPECIFIED Base {
    // Derived class members...
};

.Access-specifier can be: public, private or protected. Defaults to private.
.Public:
    -most common
    -establishes 'is-a' relationship between Derived and Base classes
.Private:
    -establishes 'derived class HAS-A base class' relationship
    -'is implemented in terms of' relationship
    -different from Composition
---------------------------------------
class Account {
    // Account class members...
};
                                              // Savings_Account 'is-a' Account
class Savings_Account : public Account {
    // Savings_Account class members...
};

Account account{};
Account *p_account = new Account();
account.deposit(1000.0);
p_account->withdraw(200.0);
delete p_account;

Savings_Account sav_account{};
Savings_Account *p_sav_account = new Savings_Account();
sav_account.deposit(1000.0);
p_sav_account->withdraw(200.0);
delete p_sav_account;









    -Types of inheritance
.Protected members and class access
.Constructors and Destructors
    -Passing arguments to base class constructors
    -Order of constructor and destructor calls
.Redefining base class methods
.Class Hierarchies
.Multiple Inheritance
