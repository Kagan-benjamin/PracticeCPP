---Variables and Constants---

What is a variable?
.example of memory in use:
                                        Memory   ...
                                       |      |  1000
                .move 21 to            |      |  1001
                location 1002          |  21  |  1002
                                       |      |  1003
                                       |      |  1004
                                       |      |  1005
                                       |      |  ...

.most programming languages enable you to associate a name with a memory location.
.example of variable in use:

                                        Memory   ...
                                       |      |  1000
                .move 21 to age        |      |  1001
                                    age|  21  |  1002   // In computing, this is 
                                       |      |  1003   // called a BINDING
                                       |      |  1004
                                       |      |  1005
                                       |      |  ...

.once we have established a binding, we don't need to worry about keeping track of
the specific memory location of individual items.                                

.A variable is an abstraction for a memory location.
.Variables allow programmers to use meaningful names and not memory addresses
.Variables have:
    -Type, their category (integer, float, string, Person, Account...)
    -Value, the contents (10, 3.14, "Ben"...)
.All variables MUST be declared before they are used.
.The value of variables may change:

int age;
age = 21;
--------------------------------------------------------------------------------------

Declaring variables:

.Variable declarations contain 2 components:
    -VariableType
    -VariableName
.Examples:
    int age;                type = integer      | name = age
    double rate;            type = double       | name = rate
    string name;            type = string       | name = name
    Account bens_account;   type = custom class | name = bens_account
    Person ben;             type = custom class | name = ben

.Variable Naming Conventions in C++:
    -Can contain letters, numbers and underscores
    -The 1st char MUST be a letter or underscore
    -Cannot used C++ reserved keywords
    -Cannot redeclare a name in the same scope 
    -C++ is case sensitive

            Legal       |       Illegal
    ---------------------------------------------------------------            
    Age                 |    int - reserved keyword
    age                 |    $age - illegal character
    _age                |    2014_age - cannot start with number
    My_age              |    My age - space not recognized
    your_age_in_2014    |    Age+1 - illegal character
    INT                 |    cout - reserved by standard library
    Int                 |    return - reserved keyword

.Best practices:
    -Be consistent with your naming conventions 
    -Camelcase vs underscores 
    -Use meaningful names, not too long or too short
    -Never use variables before initializing them
    -Declare variables as close to when you use them as possible. In general, 
     don't declare variables at the top of your files.

.Initializing Variables:
    int age; // declared but unassigned
    int age = 21; // C-like initialization
    int age (21); // Constructor initialization
    int age {21}; // C++11 list initialization syntax 
--------------------------------------------------------------------------------------

Global and Local Variables:

    .Local variables are scoped within the main() function
    
    .Global variables are scoped outside of all functions.
        -automatically initialized to 0
Example:

#include <iostream>
using namespace std;

int age {18}; // Global Variable
int main() {
    int other_age {21}; // Local Variable
    cout << age << endl;
    cout << other_age << endl;
    return 0;
}
--------------------------------------------------------------------------------------

C++ primitive types:

.Fundamental data types implemented directly by the C++ language
.Type Sizes:
    -expressed in bits
    -the more bits, the more values that can be represented
    -the more bits, the more storage required

Size(in bits) |  Representable Values 
-------------------------------------
        8     |         2^8
        16    |         2^16
        32    |         2^32
        64    |         2^64

.Character Types
    -Used to represent single characters, "A","X", "@"...
    -Wider types are used to represent wide character sets

Type Name     |   Size / Precision
-----------------------------------
    char      |     Exactly 1 byte, at least 8 bits
    char16_t  |     At least 16 bits
    char32_t  |     At least 32 bits
    wchar_t   |     Can represent the largest available character set

.Integer Types
    -Used to represent whole numbers 
    -Signed and unsigned versions

    Type Name         |    Size / Precision
--------------------------------------------
signed short int      |   At least 16 bits
signed int            |   At least 16 bits
signed long int       |   At least 32 bits
signed long long int  |   At least 64 bits
--------------------------------------------
unsigned short int    |   At least 16 bits
unsigned int          |   At least 16 bits
unsigned long int     |   At least 32 bits
unsigned long long int|   At least 64 bits

.Floating-point Types
    -Used to represent non-integer numbers
    -Represented by mantissa and exponent (scientific notation)
    -Precision is the number of digits in the mantissa
    -Precision and size are compiler dependent 

    Type Name  |   Size / Typical Precision     |  Typical Range 
------------------------------------------------------------
   float       |             / 7 decimal digits | 1.2*10^-38 to 3.4*10^38
   double      | No less than float / 15 digits | 2.2*10^-308 to 1.8*10^308
   long double | No less than double / 19 digits| 3.3*10^-4932 to 1.2*10^4932

.Boolean Type
    -Used to represent true and false values
    -In C++, zero is false
    -Non-zero is true

    Type Name  |   Size / Precision 
-------------------------------------
    bool       |  Usually 8 bits 
                 true or false (C++ keywords)
--------------------------------------------------------------------------------------




.sizeof operator 