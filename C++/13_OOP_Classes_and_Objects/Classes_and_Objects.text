------------Classes and Objects in C++--------------------------

.What is Object-Oriented Programming?

.Procedural Programming -
    .Focus is on processes or actions that a program takes
    .Programs are typically a collection of functions
    .Data is declared separately
    .Data is passed as arguments into functions
    .Fairly easy to learn

.Procedural Programming Limitations -
    .Functions need to know the structure of the data.
    .If the structure of the data changes, many functions must be changed
.As programs get larger, they become more:
    -difficult to understand
    -difficult to maintain
    -difficult to extend, debug, reuse code
    -fragile and easier to break 
-----------------------------------------
.Classes and Objects -
    .Focus is on classes that model real-world domain entities
    .Allows developers to think at a higher level of abstraction
    .Used successfully in very large programs

.Encapsulation -
    .Objects contain data AND operations that work on that data
    .Abstract Data Type (ADT)

.Information-hiding - 
    .Implementation-specific logic can be hidden
    .Users of the class code to the interface since they don't need to know the 
    implementation
    .More abstraction
    .Easier to test, debug, maintain and extend 

Reusability -
    .Easier to reuse classes in other applications
    .Faster development and better quality software

Inheritance -
    .Can create new classes in terms of existing classes
    .Reusable, polymorphic classes 
    .Polymorphism and more...
-------------------------------------------
OOP Limitations - 
    .Not a panacea, OO Programming won't make bad code better 
    .Not suitable for all types of problems
    .Not everything decomposes to a class

Learning Curve -
    .Usually a steeper learning curve than procedural, especially for C++
    .Many OO languages, many variations of OO concepts 

Design -
    .Usually more up-front design is necessary to create good models and hierarchies
    .Programs can be larger in size, slower, more complex 
---------------------------------------------------------------------------------------
.What are Classes and Objects?

Classes
    -Blueprint from which objects are created
    -A user-defined data-type
    -Has attributes (data)
    -Has methods (functions)
    -Can hide data and methods
    -Provides a publc interface

example classes: Account, Employee, Image, std::vector, std::string
---------------------------------------------
Objects
    -Created from a class
    -Represents a specific instance of a class
    -Can create many, many objects
    -Each has its own identity 
    -Each can use the defined class methods 

example Account objects: Frank's account is an instance of Account
.each Account has its own balance, can make deposits, withdrawals, etc. 
---------------------------------------------

int high_score;
int low_score;

Account frank_account;
Account jim_account;

std::vector<int> scores;
std::string name;
---------------------------------------------------------------------------------------
.Declaring Classes and Objects

class Class_Name{
    // declaration(s);
};

class Player{
    // attributes
    std::string name;
    int health;
    int xp;

    // methods
    void talk(std::string text_to_say);
    bool is_dead();
};

Player frank;
Player hero;

Player *enemy = new Player();
delete enemy;
-----------------------------------------------
class Account{
    std::string name;
    double balance;

    bool withdraw(double amount);
    bool deposit(double amount);
};

Account frank_account;
Account jim_account;

Account accounts[]{frank_account, jim_account};
std::vector<Account> accounts1 {frank_account};
accounts1.push_back(jim_account);

Account *mary_account = new Account();
delete mary_account;
---------------------------------------------------------------------------------------
Accessing Class Members

.We can access:
    -class attributes
    -class methods
.Some class members will not be accessible (private)
.We need an object to access instance variables

Dot Operator:

Account ben_account;

ben_account.balance; // returns balance attribute for ben_account instance of class Account 
ben_account.deposit(1000.00); // invokes class method deposit() with actual param 1000.00
-----------------------------------------------
If we have a pointer to an object (member of pointer operator)

Account *ben_account = new Account();

.Dereference the pointer, then use the dot operator:

(*ben_account).balance;
(*ben_account).deposit(1000.00);

.Or, use the member of pointer operator (arrow operator):

ben_account -> balance;
ben_account -> deposit(1000.00);
---------------------------------------------------------------------------------------
Class Member Access Modifiers

.PUBLIC 
    -accessible everywhere
.PRIVATE 
    -accessible only by members or friends of the class 
.PROTECTED
    -used with inheritance 
---------------------------------
public

class Class_Name {
public:
    // declaration(s);
};
---------------------------------
private 

class Class_Name {
private:
    // declaration(s);
};
---------------------------------
Player Example:

class Player{
private:
    std::string name;
    int health;
    int xp;
public:
    void talk(std::string text);
    bool is_dead();
};

Player ben;
ben.name = "Ben";                 // Compiler Error
ben.health = 1000;                // Compiler Error
ben.talk("Ready to battle");      // Ok

Player *enemy = new Player();
enemy -> xp = 100;                // Compiler Error
enemy -> talk("I will hunt you"); // Ok

delete enemy;
---------------------------------
Account example:

class Account{
private:
    std::string name;
    double balance;
public:
    bool withdraw(double amount);
    bool deposit(double amount);
};

Account ben_account;
ben_account.balance = 1000000.00;  // Compiler Error
ben_account.deposit(10000);        // Ok
ben_account.name = "Ben's Account"; // Compiler Error

Account *layla_account = new Account();
layla_account -> balance = 10000.0;   // Compiler Error
layla_account -> withdraw(10000.0);   // Ok
delete layla_account;
---------------------------------------------------------------------------------------
***Implementing Member Methods***

.Very similar to how we implement functions
.Member methods have access to member attributes
    -So you don't need to pass them in as arguments

.Can be implemented inside the class declaration 
    -Implicitly inline

class Account{
private:
    double balance;
public:
    void set_balance(double bal){
        balance = bal;
    }
    double get_balance(){
        return balance;
    }
};
---------------------------------
.Can be implemented outside the class declaration
    -Need to use Class_name::method_name

class Account{
private:
    double balance;
public:
    void set_balance(double bal);
    double get_balance();
};

void Account::set_balance(double bal){
    balance = bal;
}
double Account::get_balance(){
    return balance;
}
---------------------------------
.Can separate specification from implementation
    -.h file for the class declaration
    -.cpp file for the class implementation

file name: Account.h

#ifndef _ACCOUNT_H_  // Include Guards 
#define _ACCOUNT_H_  // pre-processor directives that guarantee file will be read only once

class Account{
private:
    double balance;
public:
    void set_balance(double bal);
    double get_balance();
};

#endif

// Can also use #pragma once if supported

file name: Account.cpp

#include "Account.h"

void Account::set_balance(double bal){
    balance = bal;
}
double Account::get_balance(){
    return balance;
}

file name: Main.cpp

#include <iostream>
#include "Account.h"
using namespace std;
int main(){
    Account ben_account;
    ben_account.set_balance(5500.0);
    double bal = ben_account.get_balance();
    cout << bal << endl;   

    return 0;
}
---------------------------------------------------------------------------------------
Constructors and Destructors

Constructors -
    .Special member method invoked during object creation
    .Useful for initialization
    .Same name as the class
    .No return type is specified
    .Can be overloaded 

class Player{
private:
    std::string name;
    int health;
    int xp;
public:
    Player();                       // Overloaded Constructors
    Player(std::string name);
    Player(std::string name, int health, int xp); 

};
------------------------------------------
class Account{
private:
    std::string name;
    double balance;
public:
    Account();                           // Constructors
    Account(std::string name, double balance);
    Account(std::string name);
    Account(double balance);
};
------------------------------------------
Destructors -
    .Special member method
    .Same name as the class preceeded with a tilde(~)
    .Invoked automatically when an object is destroyed
    .No return type and no parameters
    .Only 1 destructor is allowed per class - cannot be overloaded
    .Useful to release memory and other resources 

class Player{
private:
    std::string name;
    int health;
    int xp;
public:
    Player();
    Player(std::string name);
    Player(std::string name, int health, int xp); 
    ~Player();                                     // Destructor 
};

{
    Player slayer;
    Player ben {"Ben", 100, 4};
    Player hero {"Hero"};
    Player villain {"Villain"};
        // use the objects
        // 4 destructors called
}
Player *enemy = new Player("Enemy", 1000, 0);
delete enemy;
---------------------------------------------------------------------------------------
The Default Constructor

.Does not expect any arguments
    -Also known as no-args constructor
.If you write no constructors at all for a class
    -C++ will generate a Default Constructor that does nothing
.The default constructor is called when you instantiate a new object with no arguments

Player ben;
Player *ben = new Player;
-------------------------------------
default example:

class Account{
private:
    std::string name;
    double balance;
public:
    bool withdraw(double amount);
    bool deposit(double amount);
};

Account ben_account;
Account layla_account;
Account *frank_account = new Account;
delete frank_account;
-------------------------------------
user-defined no-args constructor:

class Account{
private:
    std::string name;
    double balance;
public:
    Account(){                              //
        name = "None";                      // User-defined no-args constructor
        balance = 0.0;                      //      
    }
    bool withdraw(double amount);
    bool deposit(double amount);
};
-------------------------------------
no default constructor:

class Account{
private:
    std::string name;
    double balance;
public:
    Account(std::string name_val, double bal){    //
        name = name_val;                          // User-defined, no defaults
        balance = bal;                            //      
    }
    bool withdraw(double amount);
    bool deposit(double amount);
};

Account frank_account;                    // ERROR
Account jim_account;                      // ERROR 
Account *mary_account = new Account;      // ERROR
delete mary_account;
Account bill_account {"Bill",15000.0};    // Ok






    -CLASS methods
    -default and overloaded constructors
    -copy and move constructors
    -shallow vs. deep copying
    -THIS pointer
.STATIC class members
.STRUCT vs. CLASS
.FRIEND of a class

