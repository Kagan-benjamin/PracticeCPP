--------------------------- Polymorphism -------------------------------------
What is polymorphism?

.Fundamental to Object-Oriented Programming
.Polymorphism
    -Compile-time / early binding / static binding   BEFORE THE PROGRAM EXECUTES
    -Run-time     / late binding  / dynamic binding  AS THE PROGRAM EXECUTES 
.In C++, default is compile-time
.Runtime Polymorphism
    -Being able to assign different meanings to the same function at run-time
.Allows us to program more abstractly
    -General vs Specific
    -Let C++ figure out which function to call at runtime
.Not the default in C++, runtime polymorphism is achieved via:
    -Inheritance
    -Base class pointers or references
    -Virtual functions 
--------------------------------------
                            Polymorphism
                            /          \
                    Compile-time       Run-time
                        |                  |                  
                    ---------              \/
                    |        |          Function Overriding 
                    |        \/
    Function Overloading    Operator Overloading
---------------------------------------
Non-polymorphic example with Static Binding:

Account a;
a.withdraw(1000);            // Account::withdraw()

Savings b;
b.withdraw(1000);            // Savings::withdraw()

Checking c;
c.withdraw(1000);            // Checking::withdraw()

Trust d;
d.withdraw(1000);            // Trust::withdraw()

Account *p = new Trust();     
p->withdraw(1000);           // Account::withdraw(), but SHOULD BE Trust::withdraw()
-----------------------------------------
Static Binding:

void display_account(const Account &account){
    acc.display();   // will always use Account::display()
}

Account a;
display_account(a);     // Account::display_account(a)
Savings b;
display_account(b);     // Account::display_account(b)
Checking c;
display_account(c);     // Account::display_account(c)
Trust d;
display_account(d);     // Account::display_account(d)
-------------------------------------------
Dynamic Binding:

Account a;
a.withdraw(1000);            // Account::withdraw()

Savings b;
b.withdraw(1000);            // Savings::withdraw()

Checking c;
c.withdraw(1000);            // Checking::withdraw()

Trust d;
d.withdraw(1000);            // Trust::withdraw()

Account *p = new Trust();    // USING POLYMORPHISM:
p->withdraw(1000);           // Trust::withdraw()

    Account::withdraw()
            /\
            |
 ------------------------
 |                      |
Savings::withdraw()   Checking::withdraw()
      /\                                   // withdraw() method is virtual in Account
      |
  Trust::withdraw()

---------------------------------------------------------------------------------------
Using Base Class Pointers:

.For dynamic polymorphism, we must have:
    -Inheritance
    -Base class pointer or Base class reference
    -Virtual functions

Account *p1 = new Account();
Account *p2 = new Savings();
Account *p3 = new Checking();
Account *p4 = new Trust();

p1->withdraw(1000);    // Account::withdraw(1000);
p2->withdraw(1000);    // Savings::withdraw(1000);
p3->withdraw(1000);    // Checking::withdraw(1000);
p4->withdraw(1000);    // Trust::withdraw(1000);

Account *array[] = {p1,p2,p3,p4};

for (auto i=0; i<4; i++){
    array[i]->withdraw(1000);  // calls specific version of withdraw
}

vector<Account *> accounts {p1,p2,p3,p4};

for (auto acc_ptr : accounts) {
    acc_ptr->withdraw();       // calls specific version of withdraw
}

// delete the pointers 
---------------------------------------------------------------------------------------
Virtual Functions:

.Redefined functions are bound statically
.Overriden functions are bound dynamically
.We accomplish this by declaring the functions to be virtual; virtual objects
are overriden
.Allows us to treat all objects generally as objects of the Base class 

.Declare the function you want to override as virtual in the Base class
.Virtual functions are virtual all the way down the hierarchy from this point
.Dynamic polymorphism only via Account class pointer or reference

class Account {
public:
    virtual void withdraw(double amount);
    ...
};
------------------------------------------
.Override the function in the Derived classes
.Function signature and return type must match EXACTLY
.Virtual keyword not required but is best practice
.If you don't provide an overriden version, it is inherited from its base class

class Checking : public Account {
public:
    virtual void withdraw(double amount);
    ...
};
---------------------------------------------------------------------------------------
Virtual Destructors:

.Problems can happen when we destroy polymorphic objects
.If a derived class is destroyed by deleting its storage via the base class pointer,
and the class has a non-virtual destructor, then the behavior is undefined in the 
C++ standard
.Derived objects must be destroyed in the correct order starting at the correct
destructor

-If has class has virtual functions, ALWAYS provide a public virtual destructor
-If the base class destructor is virtual, then all derived class destructors also are

class Account {
public:
    virtual void withdraw(double amount);
    virtual ~Account();
    ...
};
---------------------------------------------------------------------------------------
OVERRIDE Specifier:

.We can override Base class virtual functions
.The function signature and return must be EXACTLY the same
.If they are different, then we have redefinition and NOT overriding
.Redefinition is statically bound
.Overriding is dynamically bound
.C++11 provides an OVERRIDE specifier to have the compiler ensure overriding 

class Base {
public:
    virtual void say_hello() const {    // const
        std::cout << "Hello - I'm a Base class object" << std::endl;
    }
    virtual ~Base() {}
};

class Derived : public Base {
public:
    virtual void say_hello() {     // No const, NOT overriding but redefinition
        std::cout << "Hello - I'm a Derived class object" << std::endl;
    }
    virtual ~Derived() {}
};

Base *p1 = new Base();
p1->say_hello();       // invokes Base::say_hello()

Base *p2 = new Derived();
p2->say_hello();       // due to redefinition, invokes Base::say_hello()

.Not what we want since the say_hello() signatures are different between classes
.So, Derived redefines say_hello() instead of overriding it
-------------------------------
Override:

class Base {
public:
    virtual void say_hello() const {    
        std::cout << "Hello - I'm a Base class object" << std::endl;
    }
    virtual ~Base() {}
};

class Derived : public Base {
public:
    virtual void say_hello() override {   // Produces compiler error since no const    
        std::cout << "Hello - I'm a Derived class object" << std::endl;
    }
    virtual ~Derived() {}
};
---------------------------------------------------------------------------------------
FINAL Specifier:

.C++11 provides the final specifier
    -When used at the class level, prevents a class from being derived from 
    -When used at the method level, prevents virtual method from being overriden
in derived classes 

class Test_Class final {
    ...                    // Test_Class cannot be derived from
};

class Derived final : public Base {
    ...                    // Derived cannot be derived from 
};
----------------------------------
class A {
public:
    virtual void do_something();
};

class B : public A {
public:
    virtual void do_something() final;  // prevents further overriding of method
};

class C : public B {
public:
    virtual void do_something();   // final will cause compiler error: can't override
};
---------------------------------------------------------------------------------------
Using Base Class References:

.We can also use Base class references with dynamic polymorphism
.Useful when we pass objects to functions that expect a Base class reference

Account a;
Account &ref = a;
ref.withdraw(1000);  // Account::withdraw()

Trust t;
Account &ref1 = t;
ref1.withdraw(1000); // Trust::withdraw()
------------------------------
void do_withdraw(Account &account, double amount) {
    account.withdraw(amount);
}

Account a;
do_withdraw(a, 1000);  // Account::withdraw(1000)

Trust t;
do_withdraw(t, 1000);  // Trust::withdraw(1000)
---------------------------------------------------------------------------------------
Pure Virtual Functions and Abstract Classes:

.Abstract Class
    -cannot instantiate objects
    -these classes are used as base classes in inheritance hierarchies
    -often referred to as Abstract Base Classes

.Concrete Class
    -used to instantiate objects from
    -all their member functions are defined
    -Checking_Account, Savings_Account, Faculty, Staff, Enemy, Level_Boss

.Abstract base classes are usually too generic to create objects directly from:
    -Shape, Employee, Account, Player
.Serves as parent to Derived classes that may have objects
.Contains at least one pure virtual function
-----------------------------------
.Pure virtual functions:
    -Used to make a class abstract
    -Specified with "=0" in its declaration
    -Typically do not provide implementations, but possible
    -Derived classes MUST override the base class
    -If the Derived class does not override then the Derived class is also abstract
    -Used when it doesn't make sense for a base class to have an implementation
        (But concrete classes must implement it)

virtual void draw() = 0;   // Shape
virtual void defend() = 0; // Player 
-----------------------------------

                                [Shape]                  [] - Abstract class
                            +draw:   void                () - Concrete class 
                            +rotate: void
                             ->         <-
                            /             \
                           /               \
                    [Open_Shape]      [Closed_Shaped]
                         ^            ->           <-
                         |           /               \
                         |          /                 \
                      (Line)    (Circle)           (Square)

class Shape {        // ABSTRACT
private:
    // attributes common to all shapes (num_lines, line_length, etc)
public:
    virtual void draw() = 0;       // pure virtual function, no def yet since abstract
    virtual void rotate() = 0;     // pure virtual function, no def yet since abstract
    virtual ~Shape();
    ...
};

class Circle : public Shape {     // CONCRETE
private:
    // attributes for a circle (pi, circumference, area, etc)
public:
    virtual void draw() override {
        // code to draw a circle
    }
    virtual void rotate() override {
        // code to rotate a circle 
    }
    virtual ~Circle();
    ...
};

.Abstract Base classes CANNOT be instantiated directly
    Shape shape;               // error
    Shape *ptr = new Shape();  // error

.We can use pointers and references to dynamically refer to concrete classes derived 
from them: 
    Shape *ptr = new Circle();
    ptr->draw();
    ptr->rotate();
----------------------------------------------------------------------------------------
Abstract Classes as Interfaces:

.What is using a class as an interface?
    -An abstract class that has only pure virtual functions 
    -These functions provide a general set of services to the user of the class
    -Provided as public
    -Each subclass is free to implement these services as needed
    -Every service (method) must be implemented
    -The service type information is strictly enforced 

.C++ does not provide true interfaces
.We use abstract classes and pure virtual functions to achieve it
.Suppose we want to be able to provide Printable support for any object we wish
without knowing its implementation at compile time:
    std::cout << any_object << std::endl;
.any_object must conform to the Printable interface 

class Printable {
    friend ostream &operator<<(ostream &os, const Printable &obj);
public:
    virtual void print(ostream &os) const = 0;
    virtual ~Printable() {}
    ...
};

ostream &operator<<(ostream &os, const Printable &obj) {
    obj.print(os);
    return os;
}

class Any_Class : public Printable {
public:
    // must override Printable::print()
    virtual void print(ostream *os) override {
        os << "Hi from Any_Class";
    }
    ...
};

void function1 (Any_Class &obj) {
    cout << obj << endl;
}

void function2 (Printable &obj) {
    cout << obj << endl;
}


int main() {
    Any_Class *ptr = new Any_Class();
    cout << *ptr << endl;
    function1(*ptr);      // "Hi from Any_Class"
    function2(*ptr);      // "Hi from Any_Class"

    return 0;
}
------------------------------------

class Shape {
public:
    virtual void draw() = 0;
    virtual void rotate() = 0;
    virtual ~Shape() {}
    ...
};

class Circle : public Shape {
public:
    virtual void draw() override { // code };
    virtual void rotate() override { // code };
    virtual ~Circle() {}
    ...
};

// Sometimes, interface class are named as I_Shape

vector <Shape *> shapes;

Shape *p1 = new Circle();
Shape *p2 = new Line();
Shape *p3 = new Square();

for (auto const &shape : shapes) {
    shape->rotate();
    shape->draw();
}
// delete pointers 