-----------------------------Exception Handling----------------------------------------
Exception Handling
    -dealing with extraordinary situations
    -indicates that an extraordinary situation has been detected or has occurred
    -program can deal with the extraordinary situations in a suitable manner

What causes exceptions?
    -insufficient resources
    -missing resources
    -invalid operations
    -range violations
    -underflows and overflows
    -illegal data and many others 

Exception Safe
    -when your code properly handles all/most exceptions
------------------------------
Terminology:

Exceptions
    -An object or primitive type that signals that an error has occurred

Throwing an exception (raising an exception)
    -Your code detects that an error has occurred or will occur
    -The place where the error occurred may not know how to handle the error 
    -Code can throw an exception describing the error to another part of the program
    that knows how to handle the error 

Catching the exception (handling the exception)
    -Code that handles the exception
    -May or may not cause the program to terminate
------------------------------
Keywords:

THROW
    .throws an exception
    .followed by an argument (the specific exception we are throwing)

TRY { // code that may throw an exception }
    .you place code that may throw an exception in a try block
    .if the code throws an exception, the try block is exited
    .the thrown exception is handled by a catch handler
    .if no catch handler exists, the program terminates

CATCH(Exception ex) { // code to handle the exception }
    .code that handles the exception
    .can have multiple catch handlers
    .may or may not cause the program to terminate 
------------------------------
Divide By Zero example

.What happens if total is 0?
    -crash, overflow?
    -it depends on the types

double average {}, sum{}, total{};
try {                        // try block
    if (total == 0){
        throw 0;             // throw the exception
    }   
    average = sum / total;   // won't execute if total == 0
       // use average here
}
catch(double &ex) {          // exception handler 
    std::cerr << "can't divide by zero" << std::endl;
}
std::cout << "program continues" << std::endl;
---------------------------------------------------------------------------------------
Throwing an Exception from a Function:

double average{};
int sum{}, total{};

try {
    average = calculate_avg(sum, total);
    std::cout << average << std::endl;
}
catch (int &ex) {
    std::cerr << "You can't divide by 0" << std::endl;
}

double calculate_avg(int sum, int total) {
    if (total == 0){
        throw 0;
    }
    return static_cast<double>(sum) / total;
}
---------------------------------------------------------------------------------------



.How do exceptions affect flow of program control
    -Stack Unwinding
.Defining custom Exception Classes
.Standard Library Exception Hierarchy
    -std::exception and what()
