-----------------------------Exception Handling----------------------------------------
Exception Handling
    -dealing with extraordinary situations
    -indicates that an extraordinary situation has been detected or has occurred
    -program can deal with the extraordinary situations in a suitable manner

What causes exceptions?
    -insufficient resources
    -missing resources
    -invalid operations
    -range violations
    -underflows and overflows
    -illegal data and many others 

Exception Safe
    -when your code properly handles all/most exceptions
------------------------------
Terminology:

Exceptions
    -An object or primitive type that signals that an error has occurred

Throwing an exception (raising an exception)
    -Your code detects that an error has occurred or will occur
    -The place where the error occurred may not know how to handle the error 
    -Code can throw an exception describing the error to another part of the program
    that knows how to handle the error 

Catching the exception (handling the exception)
    -Code that handles the exception
    -May or may not cause the program to terminate
------------------------------
Keywords:

THROW
    .throws an exception
    .followed by an argument (the specific exception we are throwing)

TRY { // code that may throw an exception }
    .you place code that may throw an exception in a try block
    .if the code throws an exception, the try block is exited
    .the thrown exception is handled by a catch handler
    .if no catch handler exists, the program terminates

CATCH(Exception ex) { // code to handle the exception }
    .code that handles the exception
    .can have multiple catch handlers
    .may or may not cause the program to terminate 
------------------------------
Divide By Zero example

.What happens if total is 0?
    -crash, overflow?
    -it depends on the types

double average {}, sum{}, total{};
try {                        // try block
    if (total == 0){
        throw 0;             // throw the exception
    }   
    average = sum / total;   // won't execute if total == 0
       // use average here
}
catch(double &ex) {          // exception handler 
    std::cerr << "can't divide by zero" << std::endl;
}
std::cout << "program continues" << std::endl;
---------------------------------------------------------------------------------------
Throwing an Exception from a Function:

double average{};
int sum{}, total{};

try {
    average = calculate_avg(sum, total);
    std::cout << average << std::endl;
}
catch (int &ex) {
    std::cerr << "You can't divide by 0" << std::endl;
}

double calculate_avg(int sum, int total) {
    if (total == 0){
        throw 0;
    }
    return static_cast<double>(sum) / total;
}
---------------------------------------------------------------------------------------
Throwing/Catching Multiple Exceptions:

.What if a function can fail in several ways?
    -gallons is 0
    -miles or gallons is negative

double calculate_avg(int miles, int gallons) {
    if (gallons == 0){
        throw 0;
    }
    if (miles < 0 || gallons < 0){
        throw std::string{"Negative value error"};
    }
    return static_cast<double>(miles) / gallons;
}

double miles_per_gallon {};
try {
    miles_per_gallon = calculate_avg(miles, gallons);
    std::cout << miles_per_gallon << std::endl;
}
catch (int &ex) {
    std::cerr << "You can't divide by 0" << std::endl;
}
catch (std::string &ex) {
    std::cerr << ex << std::endl;
}
--------------------------------------
Catch-All Handler:

catch (int &ex) { ... }
catch (std::string &ex) { ... }
catch (...) {
    std::cerr << "Unknown exception" << std::endl;
}
---------------------------------------------------------------------------------------
Stack Unwinding:

.If an exception is thrown but not caught in the current scope, C++ tries to find
a handler for the exception by unwinding the stack
.Function in which the exception that was not caught terminates and is removed
from the call stack 
.If a try block was used, then catch blocks are checked for a match
.If no try block was used or the catch handler doesn't match, stack unwinding occurs
again
.If the stack is unwound back to main and no catch handler handles the exception, 
the program terminates
---------------------------------------------------------------------------------------
Defining Custom Exception Classes:

.We can create exception classes and throw instances of those classes
.Best practice:
    -throw an object, not a primitive type
    -throw an object by value
    -catch an object by reference (or const reference)

class DivideByZeroException {};
class NegativeValueException {}; 

double calculate_mpg(int miles, int gallons) {
    if (gallons == 0){
        throw DivideByZeroException();
    }
    if (miles < 0 || gallons < 0) {
        throw NegativeValueException();
    }
    return static_cast<double>(miles) / gallons;
}

try {
    miles_per_gallon = calculate_mpg(miles, gallons);
    std::cout << miles_per_gallon << std::endl;
}
catch (const DivideByZeroException &ex) {
    std::cerr << "You can't divide by zero" << std::endl;
}
catch (const NegativeValueException &ex) {
    std::cerr << "Negative values aren't allowed" << std::endl;
}
---------------------------------------------------------------------------------------
Class-Level Exceptions:

.Exceptions can also be thrown from within classes:
.Class Methods
    -These work the same way as they do for global functions 
.Constructors 
    -Constructors may fail
    -Constructors do not return any value
    -Throw an exception in the constructor if you cannot initialize an object
.Destructor 
    ***- DO NOT throw exceptions from the destructor 

Account::Account(std::string name, double balance)
    : name{name}, balance{balance} {
        if (balance < 0.0) {
            throw IllegalBalanceException{};
        }
}

try {
    std::unique_ptr<Account> moes_account =
        std::make_unique<Checking_Account>("Moe",-10.0);
}
catch (const IllegalBalanceException &ex) {
    std::cerr << "Couldn't create account" << std::endl;
}
---------------------------------------------------------------------------------------
C++ Standard Library Exception Class Hierarchy:

.C++ provides a class hierarchy of exception classes
    -std::exception is the base class
    -all subclasses implement the what() virtual function 
    -we can create our own user-defined exception subclasses

virtual const char *what() const noexcept;

.See references for C++ STD Exception Class Hierarchy 

class IllegalBalanceException : public std::exception {
public:
    IllegalBalanceException() noexcept = default;
    ~IllegalBalanceException() = default;
    virtual const char* what() const noexcept {
        return "Illegal balance exception";
    }
};

Account::Account(std::string name, double balance) 
    : name{name}, balance{balance} {
        if (balance < 0.0) {
            throw IllegalBalanceException{};
        }
}

try {
    std::unique_ptr<Account> moes_account =
        std::make_unique<Checking_Account>("Moe", -100.0);
    std::cout << "Use moes_account" << std::endl;
}
catch (const IllegalBalanceException &ex) {
    std::cerr << ex.what() << std::endl;    // displays "Illegal balance exception"
}