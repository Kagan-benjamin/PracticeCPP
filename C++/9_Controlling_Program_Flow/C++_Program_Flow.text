.Sequence
    -Ordering statements sequentially

.Selection
    -Making decisions

if statement
if-else statement
-----------------------------------------------------------------------------------------
Nested IF Statements:

if (expr1)
    if (expr2)
        statement1;
    else 
        statement2;

.In C++, the else statement belongs to the closest IF (same block scope)
----------------------------------------------------------------------------------------
Switch Statement:

.The control expression must evaluate to an integer type
.The case expressions must be constant expressions that evaluate to integer
or integers literals
.Once a match occurs, all following case sections are executed UNTL a break statement
is reached. At this point, the switch concludes.
.Best practices: provide break statement for each case, default is optional but should
be handled.


switch (integer_control_expr) {
    case expr1: state1; break;
    case expr2: state2; break;
    case expr3: state3: break;
    default: state_default;
}

switch (selection) {
    case '1': cout << "1 selected";
              break;
    case '2': cout << "2 selected";
              break;
    default:  cout << "1,2 NOT selected.";

}

enum Color {
    red, green, blue
};
Color screen_color {green};
switch (screen_color) {
    case red: cout << "red"; break;
    case green: cout << "green"; break;
    case blue: cout << "blue"; break;
    default: cout << "should never execute"; 
}
---------------------------------------------------------------------------------------
Conditional operator ?: (Ternary Operator)

(conditional_expr) ? expr1 : expr2

.Conditional_expr evaluates to a boolean expression
    -if conditional_expr is true, the value of expr1 is returned
    -if conditional_expr is false, the value of expr2 is returned

.Similar to if-else construct
.This is a ternary operator
.Very useful when used inline, but very easy to abuse.
.Never nest conditional operators within each other.

examples:
int a {10}, b {20};
int score {92};
int result {};

result = (a > b) ? a : b;
result = (a < b) ? (b-a) : (a-b);
result = (b != 0) ? (a/b) : 0;
cout << ((score > 90)) ? "Excellent" : "Good");
---------------------------------------------------------------------------------------
Iteration:
    .The 3rd basic building block of programming 
        -sequence, selection, ITERATION
    .Iteration or repetition 
    .Allows the execution of a statement or block of statements REPEATEDLY
    .Loops are made up of a loop condition and a loop body. The loop body contains 
    the statements to repeat if the loop condition is met.

Typical use cases:
    .Execute a loop a specific number of times
    .Execute for each element in a collection
    .Execute while a specific condition remains true
    .Execute until a specific conditions becomes false
    .Execute until we reach the end of some input stream
    .Execute forever (OS background processes)
---------------------------------------------------------------------------------------
FOR loop:
    .Iterates a specific number of times

for (initialization ; condition ; increment){
    statement(s);
}

for (int i{1}; i <= 5; i++){
    cout << i << endl;
}

int scores [] {100, 90, 87};
for (int i {0}; i < 3; i++){
    cout << scores[i] << endl;
}

Comma Operator:

    for (int i {1}, j {5}; i <= 5; i++, j++){
        cout << i << " * " << j << " : " << (i*j) << endl;
    }
.The basic FOR loop is very clear and concise.
.Since the FOR loop's expressions are all optional, it is possible to have:
    -no initialization
    -no test
    -no increment 
---------------------------------------------------------------------------------------
Range-based FOR loop:

.1 iteration for each element in a range or collection
.Introduced in C++11

for (var_type var_name: sequence){
    statement(s); // can use var_name
}

example:
----------
int scores [] {100, 90, 97};
for (int score : scores){
    cout << score << endl;
}
----------
for (auto score : scores){    // automatically assess data type for score 
    cout << score << endl;
}
----------
vector<double> temps {87.2, 77.1, 80.0, 72.5};

double average_temp {};
double running_sum {};

for (auto temp : temps){
    running_sum += temp;
}
average_temp = running_sum / temps.size();
-----------
for (auto c : "Frank"){
    cout << c << endl;
}
---------------------------------------------------------------------------------------
WHILE loop:
    .Iterate while a condition remains true
    .Iterate while a condition remains false
    .Check the condition at the BEGINNING of every iteration 






    
DO-WHILE loop:
    .Iterate while a condition remains true
    .Iterate while a condition remains false
    .Check the condition at the END of every iteration.

continue and break
infinite loops
nested loops 