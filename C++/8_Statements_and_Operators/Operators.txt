--Assignment Operator--

lhs = rhs

.Right-hand side (rhs) is an expression that is evaluated to a value
.The value of the rhs is stored to the lhs
.The value of the rhs must be type compatible with the lhs
.The lhs must be assignable
.Assignment expression is evaluated to what was just assigned
.More than one variable can be assigned in a single statement 
--------------------------------------------------------------------------------------
C++ Arithmetic Operators

+ addition | - subtraction | * multiplication | / division | % modulo 

.modulo or remainder only works with integers
.+,-,*,/ operators are overloaded to work with multiple types such as int, double, etc.
---------------------------------------------------------------------------------------
Increment / Decrement Operators

Increment operator: ++
Decrement operator: --

.Increases or decreases its operand by 1
.Can be used with integers, floating point types and pointers

Prefix: ++num
Postfix: num++

.Don't overuse this operator and never use it twice for the same variable within
the same statement.
---------------------------------------------------------------------------------------
Testing for Equality

.The == and != operators:
    .compares the values of 2 expressions 
    .evaluates to a Boolean (1 or 0)
    .commonly used in control flow statements 

expr1 == expr2 // evaluates to True if expr1 value = expr2 value 
expr1 != expr2 // evaluates to True if expr1 value != expr2 value
100 == 200 // evaluates to False since 100 != 200
num1 != num2 // evaluates to True if num1 value != num2 value

example:
bool result {false};
result = (100 == 50+50);
result = (num1 != num2);

cout << (num1 == num2) << endl; // 0 or 1 
cout << std::boolalpha;
cout << (num1 == num2) << endl; // True or False
cout << std::noboolalpha;
---------------------------------------------------------------------------------------
Relational Operators:

Operator  |   Meaning
----------------------
    >     | greater than
    >=    | greater than or equal to
    <     | less than
    <=    | less than or equal to
    <=>   | three-way comparison (C++20)
---------------------------------------------------------------------------------------
Logical Operators: 

Operator  |   Meaning 
----------------------
 not / !  |  negation
 and / && |  logical AND
 or / ||  |  logical OR

NOT (!) - expression A  |  expression !A 
-------------------------------------------
                True    |      False
                False   |      True

AND (&&) - expression A  |  expression B   |  A && B  |  
-------------------------------------------------------
                True    |      True        |   True
                True    |      False       |   False
                False   |      True        |   False
                False   |      False       |   False 

OR (||) - expression A  |  expression B   |  A || B  |  
-------------------------------------------------------
                True    |      True        |   True
                True    |      False       |   True
                False   |      True        |   True
                False   |      False       |   False 

Precedence:
    -NOT has the highest precedence, followed by AND, then OR 
    -NOT is a unary operator
    -AND and OR are binary operators

Examples:
    num1 >= 10 && num1 < 20                // True ONLY if num1 >= 10 AND num1 < 20
    num1 <= 10 || num1 >= 20               // True if num1 <= 10 OR num1 >= 20 
    !is_raining && temperature > 32.0
    is_raining || is_snowing 
    temperature > 100 && is_humid || is_raining 

Short-Circuit Evaluation:
    -When evaluating a logical expression, C++ stops as soon as the result is known
Example: expr1 || expr2 || expr3 // if expr1 is True, expr2 and expr 3 are not evaluated
