--------C++ Functions------------
What is a function?
    .C++ Programs:
        -C++ Standard Libraries (functions and classes)
        -3rd-Party Libraries (functions and classes)
        -Out own functions and classes

.Functions allow the modularization of a program
    -Separate code into logical self-contained units
    -These units can be reused

.Write your code to the function specification
.Understand what the function does
.Understand what information the function needs 
.Understand what the function returns
.Understand any errors the function may produce
.Understand any performance contraints

Information-Hiding: Don't worry about HOW the function works internally, unless you are the one
writing the function!

example:

int main(){

// read input
    read_input();

// process input
    process_input();

// provide output 
    provide_output();

    return 0;
}

.Common mathematical calculations
.Global functions called as:

function_name(argument);
    function_name(argument1, argument2, ...);

cout << sqrt(400.0) << endl;
double result;
result = pow(2.0, 3.0);
----------------------------------------------------------------------------------------
Defining our own functions:

int add_numbers(int a, int b){
    if (a < 0 || b < 0){
        return 0;
    }
    else {
        return a + b;
    }
}
cout << add_numbers(20, 40);

.Function Name:
    -the name of the function
    -same rules as for variables
    -should be meaningful!
    -usually a verb or verb phrase 

.Parameter List:
    -the variables that are expected to be passed into the function
    -their types must be specified

.Return Type:
    -the type of the data that is returned from the function
    -can return nothing, indicated with keyword 'VOID'

.Body:
    -the statements that are executed when the function is called 
    -enclosed in {} curly braces
---------------------
Examples:

int function_name(){
    statements(s);
    return 0;
}
---------------------
int function_name(int a){     // [return type] [function name] (parameters) 
    statement(s);             // [function body]
    return 0;
}
---------------------
No return type:

void function_name(){
    statement(s);
    return;                   // return statement is optional here
}
---------------------
void function_name(int a, std::string b){
    statement(s);             // arguments must be supplied in the order listed
    return; 
}
---------------------
void say_hello(){
    cout << "Hello" << endl;
}

int main(){
    for (size_t i{0}; i < 10; i++){
        say_hello();
    }
    return 0;
}
---------------------
.Functions can call other functions, however, the compiler
must know the function details BEFORE it is called!

int main(){
    say_hello(); // called BEFORE it is defined - ERROR
    return 0;
}
void say_hello(){
    cout << "Hello" << endl;
}
---------------------






.Prototype
.Parameters and pass-by-value
.return statement
.default parameter values
.overloading
.passing arrays to functions
.pass-by-reference
.inline functions
.auto return type
.recursive functions
