Arrays and Vectors
--------------------------------------------------------------------------------------
Arrays
.Arrays are a compound data type or data structures - data type of arrays includes
the array itself and the data type of values within the array
.Collection of elements
**.All elements are of the same type**
.Each element can be accessed directly

Array Characteristics:
.Fixed size
.Elements are all of the same type
.Stored contiguously in memory
.Individual elements can be accessed by their position or index
.1st element is at index 0
.last element is at index size-1
.No checking to see if you are out of bounds
.Always initialize arrays
.Arrays are very efficient and iteration is often used to process them.

Example Array:
            Test Scores (test_scores) |  Element #
            ---------------------------------------               
                        100           |    [0]
                         95           |    [1]
                         87           |    [2]
                         91           |    [3]
                        100           |    [4]
                         78           |    [5]

Array Declaration:   Element_Type | array_name | [constant number of elements];
examples:
                                int test_scores [6];
                                int high_score_per_level [10];
                                const double days_in_year {365};
                                double hi_temperatures [days_in_year];

Array Initialization:   Element_Type | array_name | [# elements] | {init list};
examples:
                int test_scores [6] {100, 95, 87, 91, 100, 78};
                int high_score_per_level [10] {32, 51}; // all remaining set to 0
                const double days_in_year {365};
                double hi_temperatures [days_in_year] {0}; // all set to 0
                int another_array [] {1,2,3,4,5}; // array size auto calculated

Accessing Array Elements:   array_name | [element_index]
examples:
            int test_scores [6] {100, 95, 87, 91, 100, 78};
            cout << "Score at index 0: " << test_scores[0] << endl;
            cout << "Score at index 1: " << test_scores[1] << endl;
            cout << "Score at index 2: " << test_scores[2] << endl;
            cout << "Score at index 3: " << test_scores[3] << endl;
            cout << "Score at index 4: " << test_scores[4] << endl;
            cout << "Score at index 5: " << test_scores[5] << endl;

test_scores[0] = 90; // assignment statement 
cin >> test_scores[0]; // reassign array elements by user input
cin >> test_scores[1];

.In C++, the name of the array represents the location of the first element in the
array (index 0) in memory.
.The [index] represents the offset from the beginning of the array
.C++ simply performs a calculation to find the correct element.
.There are NO in-built mechanisms for bounds checking!


.Multi-dimensional Arrays

Vectors
.What are they?
.Advantages vs. arrays
.Declaration and initialization