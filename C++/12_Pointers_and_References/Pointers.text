---------- Pointers ------------
What is a pointer?

.A variable
    -whose value is an address. also possess a type and a value
.What can be at that address?
    -another variable
    -a function
.Pointers point to variables or functions
.If x is an integer variable and its value is 10, then I can declare a pointer 
that points to it
.In order to use the data that the pointer is pointing to, you must know its type

Why use pointers?

.Inside functions, pointers can be used to access data that is defined outside 
the function. Those variables may not be in scope, so you cannot access them
by their name
.Pointers can be used to operate on arrays very efficiently
.We can allocate memory dynamically on the heap or free store
    -This memory doesn't even have a variable name
    -The only way to get to it is via a pointer
.Useful with Object Oriented paradigm; pointers are how polymorphism works
.Can access specific addresses in memory 
    -Useful in embedded and systems applications
---------------------------------------------------------------------------------------
Declaring Pointers:

variable_type *pointer_name {null_ptr};  
                       // uninitialized pointers will contain garbage data
int *int_ptr {};
double* double_ptr {nullptr};
char *char_ptr {nullptr};
string *string_ptr {nullptr};

.Always initialize pointers
.Uninitialized pointers contain garbage data and can 'point anywhere'
.Initializing to zero or nullptr(C++ 11) represents address 0
.If you don't initialize a pointer to point to a variable or function, then you
should initialize it to 'nullptr' to make it null. 
---------------------------------------------------------------------------------------
Accessing the Pointer Address and Storing Addresses in Pointers

the ADDRESS operator (&num)
    .Variables are stored in unique addresses
    .Unary operator
    .Evaluates to the address of its operand, which cannot be a const or expression
    that evaluates to temp values

int num{10};
cout << "Value of num is: " << num << endl;         // 10
cout << "sizeof of num is: " << sizeof num << endl; // 4 (bytes)
cout << "Address of num is: " << &num << endl;      // 0x61ff1c

int *p;
cout << "Value of p is: " << p << endl;             // 0x61ff60 - garbage
cout << "Address of p is: " << &p << endl;          // 0x61ff18
cout << "sizeof of p is: " << sizeof p << endl;     // 4
p = nullptr;                                        // set p to point nowhere             
cout << "Value of p is: " << p << endl;             // 0
---------------------------------

.Don't confuse the size of a pointer and the size of what it points to
.All pointers in a program have the same size 
.They may be pointing to very large or very small types !Be Aware!

int *p1 {nullptr};
double *p2 {nullptr};
unsigned long long *p3 {nullptr};      // all pointers have size 8 bytes
vector<string> *p4 {nullptr};
string *p5 {nullptr};
---------------------------------
Typed Pointers:

.The compiler will make sure that the address stored in a pointer variable is of
the correct type

int score{10};
double temp{100.7};

int *score_ptr {nullptr};
score_ptr = &score;      // OK
score_ptr = &temp;      // Compiler error, wrong type 
---------------------------------------------------------------------------------------
Dereferencing Pointers:

.If score_ptr is a pointer and has a valid address, then we can access the data
at the address contained in score_ptr by using the dereferencing operator (*)

int score{100};
int *score_ptr{&score};

cout << *score_ptr << endl;   // 100
*score_ptr = 200;
cout << *score_ptr << endl;   // 200
cout << score << endl;        // 200
----------------------------------
double high_temp{100.7};
double low_temp{37.4};
double *temp_ptr{&high_temp};
cout << *temp_ptr << endl;    // 100.7
temp_ptr = &low_temp;         // pointer is set to new address
cout << *temp_ptr << endl;    // 37.4
----------------------------------
string name{"Frank"};
string *name_ptr{&name};
cout << *name_ptr << endl;    // Frank
name = "James";               // underling variable is set to new value
cout << *name_ptr << endl;    // James
---------------------------------------------------------------------------------------
Dynamic memory allocation: - Allocating storage from the heap

.We often don't know how much storage we need until we need it
.We can allocate storage for a variable at run time
.Recall C++ arrays
    -We had to explicitly provide the size and it was fixed
    -But vectors grow and shrink dynamically
.We can use pointers to access newly allocated heap storage

int *int_ptr{nullptr};
int_ptr = new int;        // allocate an integer on the heap
cout << int_ptr << endl;  // 0x2747f28 - address of newly initialized variable
cout << *int_ptr << endl; // 5849945845 - garbage
*int_ptr = 100;
cout << *int_ptr << endl; // 100

int *int_ptr{nullptr};    
int_ptr = new int;        // allocate an integer on the heap
......
delete int_ptr;           // frees the allocated storage
-----------------------------------
Arrays:

int *array_ptr{nullptr};
int size{};

cout << "How big do you want the array? "; 
cin >> size;

array_ptr = new int[size];
.......
delete [] array_ptr;
---------------------------------------------------------------------------------------
Pointers and Arrays:

.The value of an array name is the address of the first element in the array
.The value of a pointer variable is an address
.If the pointer points to the same data type as the array element, then the pointer
and array name can be used (almost) interchangeably to interact with the array

int scores[] {100,95,89};

cout << scores << endl;  // 0x61fec8
cout << *scores << endl; // 100

int *score_ptr{scores};
cout << score_ptr << endl;  // 0x61fec8
cout << *score_ptr << endl; // 100
--------------------------------------
int scores[] {100,95,89};
int *score_ptr{scores};

cout << score_ptr[0] << endl; // 100
cout << score_ptr[1] << endl; // 95
cout << score_ptr[2] << endl; // 89

cout << score_ptr << endl;       // 0x61ff10
cout << (score_ptr + 1) << endl; // 0x61ff14   // moves over 4 bytes in memory
cout << (score_ptr + 2) << endl; // 0x61ff18   // to next element location

cout << *score_ptr << endl;        // 100
cout << *(score_ptr + 1) << endl;  // 95
cout << *(score_ptr + 2) << endl;  // 89
--------------------------------------
int array_name[] {1,2,3,4,5};
int *pointer_name {array_name};

Subscript Notation: array_name[index], pointer_name[index]
Offset Notation: *(array_name + index), *(pointer_name + index)
---------------------------------------------------------------------------------------
Pointer Arithmetic:

.Pointers can be used in 
    -Assignment expressions
    -Arithmetic expressions
    -Comparison expressions
.C++ allows pointer arithmetic
.Pointer arithmetic only makes sense with raw arrays

. (++) increments a pointer to point to the next element in contiguous memory
. (--) decrements a pointer to point to the previous array element

int_ptr++;  |   int_ptr--;
--------------------------------------
. (+) increment pointer by n * sizeof(type)
. (-) decrement pointer by n * sizeof(type)

int_ptr += n;  |  int_ptr -= n;

Subtracting two pointers:
    -Determine the number of elements between the pointers
    -Both pointers must point to the same data type

int n = int_ptr2 - int_ptr1;
--------------------------------------
.Comparison operators can be used to determine if two pointers point to the 
same location. !!! it DOES NOT compare the value of the data located at those points !!

string s1 {"Frank"};
string s2 {"Frank"};

string *p1 {&s1};
string *p2 {&s2};
string *p3 {&s1};

cout << (p1 == p2) << endl; // False
cout << (p1 == p3) << endl; // True
cout << (*p1 == *p2) << endl; // True
cout << (*p1 == *p3) << endl; // True
---------------------------------------------------------------------------------------
Const and Pointers:

.There are several ways to qualify pointers using const:
    -Pointers to constants
    -Constant pointers
    -Constant pointers to constants 

Pointers to Constants:
    -The data pointed to by the pointers is constant and CANNOT be changed
    -The pointer itself can change and point somewhere else

int high_score {100};
int low_score {65};
const int *score_ptr {&high_score};

*score_ptr = 86;           // ERROR
score_ptr = &low_score;    // Ok
-------------------------------------
Constant Pointers:
    -The data pointed to by the pointers can be changed 
    -The pointer itself CANNOT change and point somewhere else 

int high_score{100};
int low_score{65};
int *const score_ptr {&high_score};

*score_ptr = 86;          // Ok
score_ptr = &low_score;   // ERROR
-------------------------------------
Constant Pointers to Constants:
    -The data pointed to by the pointers CANNOT be changed
    -The pointer itself CANNOT be changed 

int high_score{100};
int low_score{65};
const int *const score_ptr {&high_score};

*score_ptr = 86;          // ERROR
score_ptr = &low_score;   // ERROR
---------------------------------------------------------------------------------------
Using Pointers to Functions:

.Pass-by-reference with pointer parameters
.We can use pointers and the dereference operator to achieve pass-by-reference 
.The function parameter is a pointer
.The actual parameter can be a pointer or address of a variable 

void double_data(int *int_ptr);

void double_data(int *int_ptr){
    *int_ptr *= 2;
}

int main(){
    int value{10};
    cout << value << endl;   // 10
    double_data(&value);    
    cout << value << endl;   // 20
}
------------------------------------
Returning a Pointer from a Function:

type *function();

.These functions should return pointers to:
    -Memory dynamically allocated in the function
    -Data that was passed in
.They should NEVER return a pointer to a local function variable!

int *largest_int(int *int_ptr1, int *int_ptr2){
    if (*int_ptr1 > *int_ptr2){
        return int_ptr1;
    }
    else {
        return int_ptr2;
    }
}

int main(){
    int a{100};
    int b{200};

    int *largest_ptr{nullptr};
    largest_ptr = largest_int(&a,&b);
    cout << *largest_ptr << endl;     // 200
    return 0;
}
----------------------------------------------
Returning Dynamically Allocated Memory:

int *create_array(size_t size, int init_val = 0){
    int *new_storage{nullptr};

    new_storage = new int[size];
    for (size t i{0}; i < size; i++){
        new_storage[i] = init_val;
    }
    return new_storage;
}

int main(){
    int *my_array;                    // will be allocated by the function
    my_array = create_array(100,20);  // creates the array 

        // use it

    delete [] my_array;               // be sure to free the storage 
    return 0;
}
----------------------------------------------
Common Errors:

int *dont_do_this(){
    int size{};
    ...
    return &size;
}                                    // DO NOT return stack/local variables 
int *or_this(){
    int size{};
    int *int_ptr{&size};
    ...
    return int_ptr;
}
---------------------------------------------------------------------------------------
Potential Pointer Pitfalls:

.Uninitialized pointers

int *int_ptr;    // pointing anywhere
...
*int_ptr = 100;  // Hopefully a crash


.Dangling pointers
    -Pointer that is pointing to released memory 
        -For example, 2 pointers point to the same data
        -1 pointer releases the data with delete
        -The other pointer accesses the release data
    -Pointer that points to memory that is invalid 
        -Returning a pointer to a function local variable 


.Not checking if new failed to allocate memory
    -If new fails, an exception is thrown
    -We can use exception handling to catch exceptions
    -Dereferencing a null pointer will cause your program to crash


.Leaking memory 
    -Forgetting to release allocated memory with delete
    -If you lose your pointer to the storage allocated on the heap you have 
    no way to get to that storage again 
    -The memory is orphaned or leaked
    -One of the most common pointer problems
---------------------------------------------------------------------------------------
What is a Reference?

.An alias for a variable
.Must be initialized to a variable when declared
.Cannot be null
.Once initialized, cannot be made to refer to a different variable
.Very useful as function parameters
.Might be helpful to think of a reference as a constant pointer that is 
automatically dereferenced

vector<string> stooges {"Larry","Moe","Curly"};

for (auto str : stooges){
    str = "Funny";        // changes the copy 
}
for (auto str : stooges){
    cout << str << endl;  // Larry, Moe, Curly 
}
-------------------------------------------------
vector<string> stooges {"Larry","Moe","Curly"};

for (auto &str : stooges){
    str = "Funny";        // changes the actual 
}
for (auto str : stooges){
    cout << str << endl;  // Funny, Funny, Funny
}
-------------------------------------------------
vector<string> stooges {"Larry","Moe","Curly"};

for (auto const &str : stooges){
    str = "Funny";        // Compiler error since const is used
}
for (auto const &str : stooges){
    cout << str << endl;  // No error since this just displays
}
---------------------------------------------------------------------------------------
L-Values, R-Values and L/R-Value References:

.L-values:
    -values that have names and are addressable
    -modifiable if they are not constants

int x{100};   // x is an l-value 
x = 1000;
x = 1000 + 20;  

string name;  // name is an l-value
name = "Ben";

100 = x;       // 100 is NOT an l-value
(1000+20) = x; // (1000+20) is NOT an l-value
"Frank" = name;  // not valid
----------------------------------
.R-values: non-addressable and non-assignable
    -Any value that is NOT an l-value
        -On the right-hand side of an assignment expression 
        -A literal
        -A temporary which is intended to be non-modifiable 

int x{100};       // 100 is an r-value
int y = x + 200;  // (x + 200) is an r-value

string name;     
name = "Ben";     // "Ben" is an r-value 

int max_num = max(20,30);   // max(20,30) is an r-value

.R-values can be assigned to l-values explicitly

int x{100};
int y{0};

y = 100;    // r-value 100 assigned to l-value y
x = x + y;  // r-value (x+y) assigned to l-value x
----------------------------------
The references we've used are l-value references 

int x{100};
int &ref1 = x;   // ref1 is reference to l-value 
ref1 = 1000; 
int &ref2 = 100; // ERROR, cannot reference r-value 100

int square(int &n){
    return n*n;
}
int num{10};

square(num); OK
square(5);  ERROR - can't reference r-value 5 
--------------------------------------------------------------------------------------

.Pass-by-Value:
    -When the function does NOT modify the actual parameter, and
    -The parameter is small and efficent to copy like simple types (int, char, double)

.Pass-by-Reference using a Pointer:
    -When the function DOES modify the actual parameter, and
    -The parameter is expensive to copy, and
    -It's OK to assign the pointer a nullptr value.

.Pass-by-Reference using a Pointer to Const:
    -When the function does NOT modify the actual parameter, and
    -The parameter is expensive to copy, and
    -It's OK to assign the pointer a nullptr value, and
    -You don't want to modify the pointer itself

.Pass-by-Reference using a Reference:
    -When the function DOES modify the actual parameter, and
    -The parameter is expensive to copy, and
    -The parameter will NEVER BE nullptr

.Pass-by-Reference using a Const Reference:
    -When the function does NOT modify the actual parameter, and
    -The parameter is expensive to copy, and
    -The parameter will NEVER BE nullptr 



        |Modifies Actual Params | Expensive | Nullptr OK | Modify Pointer OK|
        ---------------------------------------------------------------------
PBV:    |          NO           |    NO     |     YES    |       YES        |
PBR-P:  |          YES          |    YES    |     YES    |       YES        |
PBR-PC: |          NO           |    YES    |     YES    |       NO         |
PBR-R:  |          YES          |    YES    |     NO     |       NO         |
PBR-RC: |          NO           |    YES    |     NO     |       NO         |



.const and references 
.Reference variables in range-based for loops
.Potential reference pitfalls

.Raw vs Smart pointers 
