---------- Pointers ------------
What is a pointer?

.A variable
    -whose value is an address. also possess a type and a value
.What can be at that address?
    -another variable
    -a function
.Pointers point to variables or functions
.If x is an integer variable and its value is 10, then I can declare a pointer 
that points to it
.In order to use the data that the pointer is pointing to, you must know its type

Why use pointers?

.Inside functions, pointers can be used to access data that is defined outside 
the function. Those variables may not be in scope, so you cannot access them
by their name
.Pointers can be used to operate on arrays very efficiently
.We can allocate memory dynamically on the heap or free store
    -This memory doesn't even have a variable name
    -The only way to get to it is via a pointer
.Useful with Object Oriented paradigm; pointers are how polymorphism works
.Can access specific addresses in memory 
    -Useful in embedded and systems applications
---------------------------------------------------------------------------------------
Declaring Pointers:

variable_type *pointer_name {null_ptr};  
                       // uninitialized pointers will contain garbage data
int *int_ptr {};
double* double_ptr {nullptr};
char *char_ptr {nullptr};
string *string_ptr {nullptr};

.Always initialize pointers
.Uninitialized pointers contain garbage data and can 'point anywhere'
.Initializing to zero or nullptr(C++ 11) represents address 0
.If you don't initialize a pointer to point to a variable or function, then you
should initialize it to 'nullptr' to make it null. 
---------------------------------------------------------------------------------------
Accessing the Pointer Address and Storing Addresses in Pointers

the ADDRESS operator (&num)
    .Variables are stored in unique addresses
    .Unary operator
    .Evaluates to the address of its operand, which cannot be a const or expression
    that evaluates to temp values

int num{10};
cout << "Value of num is: " << num << endl;         // 10
cout << "sizeof of num is: " << sizeof num << endl; // 4 (bytes)
cout << "Address of num is: " << &num << endl;      // 0x61ff1c

int *p;
cout << "Value of p is: " << p << endl;             // 0x61ff60 - garbage
cout << "Address of p is: " << &p << endl;          // 0x61ff18
cout << "sizeof of p is: " << sizeof p << endl;     // 4
p = nullptr;                                        // set p to point nowhere             
cout << "Value of p is: " << p << endl;             // 0
---------------------------------

.Don't confuse the size of a pointer and the size of what it points to
.All pointers in a program have the same size 
.They may be pointing to very large or very small types !Be Aware!

int *p1 {nullptr};
double *p2 {nullptr};
unsigned long long *p3 {nullptr};      // all pointers have size 8 bytes
vector<string> *p4 {nullptr};
string *p5 {nullptr};
---------------------------------
Typed Pointers:

.The compiler will make sure that the address stored in a pointer variable is of
the correct type

int score{10};
double temp{100.7};

int *score_ptr {nullptr};
score_ptr = &score;      // OK
score_ptr = &temp;      // Compiler error, wrong type 
---------------------------------------------------------------------------------------
Dereferencing Pointers:

.If score_ptr is a pointer and has a valid address, then we can access the data
at the address contained in score_ptr by using the dereferencing operator (*)

int score{100};
int *score_ptr{&score};

cout << *score_ptr << endl;   // 100
*score_ptr = 200;
cout << *score_ptr << endl;   // 200
cout << score << endl;        // 200
----------------------------------
double high_temp{100.7};
double low_temp{37.4};
double *temp_ptr{&high_temp};
cout << *temp_ptr << endl;    // 100.7
temp_ptr = &low_temp;         // pointer is set to new address
cout << *temp_ptr << endl;    // 37.4
----------------------------------
string name{"Frank"};
string *name_ptr{&name};
cout << *name_ptr << endl;    // Frank
name = "James";               // underling variable is set to new value
cout << *name_ptr << endl;    // James
---------------------------------------------------------------------------------------
Dynamic memory allocation: - Allocating storage from the heap

.We often don't know how much storage we need until we need it
.We can allocate storage for a variable at run time
.Recall C++ arrays
    -We had to explicitly provide the size and it was fixed
    -But vectors grow and shrink dynamically
.We can use pointers to access newly allocated heap storage

int *int_ptr{nullptr};
int_ptr = new int;        // allocate an integer on the heap
cout << int_ptr << endl;  // 0x2747f28 - address of newly initialized variable
cout << *int_ptr << endl; // 5849945845 - garbage
*int_ptr = 100;
cout << *int_ptr << endl; // 100

int *int_ptr{nullptr};    
int_ptr = new int;        // allocate an integer on the heap
......
delete int_ptr;           // frees the allocated storage
-----------------------------------
Arrays:

int *array_ptr{nullptr};
int size{};

cout << "How big do you want the array? "; 
cin >> size;

array_ptr = new int[size];
.......
delete [] array_ptr;
---------------------------------------------------------------------------------------
Pointers and Arrays:

.The value of an array name is the address of the first element in the array
.The value of a pointer variable is an address
.If the pointer points to the same data type as the array element, then the pointer
and array name can be used (almost) interchangeably to interact with the array

int scores[] {100,95,89};

cout << scores << endl;  // 0x61fec8
cout << *scores << endl; // 100

int *score_ptr{scores};
cout << score_ptr << endl;  // 0x61fec8
cout << *score_ptr << endl; // 100
--------------------------------------
int scores[] {100,95,89};
int *score_ptr{scores};

cout << score_ptr[0] << endl; // 100
cout << score_ptr[1] << endl; // 95
cout << score_ptr[2] << endl; // 89

cout << score_ptr << endl;       // 0x61ff10
cout << (score_ptr + 1) << endl; // 0x61ff14   // moves over 4 bytes in memory
cout << (score_ptr + 2) << endl; // 0x61ff18   // to next element location

cout << *score_ptr << endl;        // 100
cout << *(score_ptr + 1) << endl;  // 95
cout << *(score_ptr + 2) << endl;  // 89
--------------------------------------
int array_name[] {1,2,3,4,5};
int *pointer_name {array_name};

Subscript Notation: array_name[index], pointer_name[index]
Offset Notation: *(array_name + index), *(pointer_name + index)
---------------------------------------------------------------------------------------
Pointer Arithmetic:

.Pointers can be used in 
    -Assignment expressions
    -Arithmetic expressions
    -Comparison expressions
.C++ allows pointer arithmetic
.Pointer arithmetic only makes sense with raw arrays

. (++) increments a pointer to point to the next element in contiguous memory
. (--) decrements a pointer to point to the previous array element

int_ptr++;  |   int_ptr--;
--------------------------------------
. (+) increment pointer by n * sizeof(type)
. (-) decrement pointer by n * sizeof(type)

int_ptr += n;  |  int_ptr -= n;

Subtracting two pointers:
    -Determine the number of elements between the pointers
    -Both pointers must point to the same data type

int n = int_ptr2 - int_ptr1;
--------------------------------------
.Comparison operators can be used to determine if two pointers point to the 
same location. !!! it DOES NOT compare the value of the data located at those points !!

string s1 {"Frank"};
string s2 {"Frank"};

string *p1 {&s1};
string *p2 {&s2};
string *p3 {&s1};

cout << (p1 == p2) << endl; // False
cout << (p1 == p3) << endl; // True
cout << (*p1 == *p2) << endl; // True
cout << (*p1 == *p3) << endl; // True





.const and pointers
.Using pointers to functions
.Potential pointer pitfalls 

.What is a reference?
.Review passing references to functions
.const and references 
.Reference variables in range-based for loops
.Potential reference pitfalls

.Raw vs Smart pointers 
