-----Characters and Strings------

.Character functions:

#include <cctype>
function_name(char)

.Functions for testing characters
.Functions for converting character case

Testing Functions:
--------------------------------------------------
isalpha(c) - True if c is a letter
isalnum(c) - True if c is a letter or digit
isdigit(c) - True if c is a digit
islower(c) - True if c is a lowercase letter
isprint(c) - True if c is a printable character
ispunct(c) - True if c is a punctuation character
isupper(c) - True if c is an uppercase letter
isspace(c) - True if c is whitespace
---------------------------------------------------

Conversion Functions:
---------------------------------------------------
tolower(c) - returns lowercase of c
toupper(c) - returns uppercase of c 
---------------------------------------------------

.C-style Strings:
.Sequence of characters
    -stored contiguously in memory
    -implemented as an array of characters
    -terminated by a null character (null)
    -referred to as zero or null-terminated strings

.String literal
    -sequence of characters in double quotes, eg. "Ben"
    -constant
    -terminated with null character

examples:  "C++ is fun"
    C | + | + |  | i | s |  | f | u | n | \0 |

char my_name[] {"Frank"};

    F | r | a | n | k | \0 |
my_name[5] = 'y'; // Problem, not enough memory blocks allocated 
 
char my_name[8];
   ? | ? | ? | ? | ? | ? | ? | ?
my_name = "Frank"; // error, cannot use assignment like this w/ strings since 
                      // the variable points to a location in memory
strcpy(my_name, "Frank"); // This Works

C-Style String Examples:

char str[80];
strcpy(str, "Hello ");  // copy to string
strcat(str, "there");   // concatenate
cout << strlen(str);    // 10
strcmp(str, "Another"); // -1
---------------------------------------------------------------------------------------

Working with C-style Strings:

.Copying
.Concatenation
.Comparison
.Searching
.Others 

.Includes functions to convert C-style Strings to:
    -integer, float, long, etc.
---------------------------------------------------------------------------------------

C++ Strings:

.std::string is a Class in the Standard Template Library
.#include <string>
.std namespace
.contiguous in memory
.dynamic size
.work with input and output streams
.lots of useful member functions
.our familiar operators can be used
.can be easily converted to C-style strings if necessary
.safer than C-style strings, include bounds checking in methods 

Declaring and initializing:

#include <string>
using namespace std;

string s1;
string s2 {"Frank"};
string s3 {s2};
string s4 {"Frank", 3}; // only use first 3 characters
string s5 {s3, 0, 2};   // start at index 0, use 2 chars. "Fr"
string s6 (3, 'X');     // initialize w/ 3 Xs

string s1;
s1 = "C++ Rocks!";

string s2 {"Hello"};
s2 = s1;
---------------------------------------------------------------------------------------
Concatenation of Strings:

string part1 {"C++"};
string part2 {"is a powerful"};

string sentence;
sentence = part1 + " " + part2 + " language."; // "C++ is a powerful language."
sentence = "C++" + " is powerful."; // THIS DOES NOT WORK, uses C-style literals
---------------------------------------------------------------------------------------
Accessing Characters [] and at() method:

string s1;
string s2 {"Frank"};
cout << s2[0] << endl;    // F
cout << s2.at(0) << endl; // F

s2[0] = 'f';             // frank
s2.at(0) = 'p';          // prank

string s1 {"Frank"};
for (char c : s1){
    cout << c << endl;   // F r a n k
}

string s1 {"Frank"};
for (int c : s1){
    cout << c << endl;   // 70 114 97 110 107 0  (ASCII codes for each character)
}
---------------------------------------------------------------------------------------
Comparison: == | != | > | >= | < | <=
.The objects are compared character by character lexically.
.Can compare:
    -2 std::string objects
    -std::string object and C-style string literal
    -std::string object and C-style string variable 

string s1{"Apple"};
string s2{"Banana"};
string s3{"Kiwi"};
string s4{"apple"};
string s5{s1};      // Apple

s1 == s5       // True
s1 == s2       // False
s1 != s2       // True
s1 < s2        // True - Apple < Banana according to ASCII 
s2 > s1        // True
s4 < s5        // False lowercase comes after
s1 == "Apple"; // True

Substrings - substr():
.Extracts a substring from a std::string
    
object.substr(start_index, length)

string s1 {"This is a test"};
cout << s1.substr(0, 4); // This
cout << s1.substr(5, 2); // is
cout << s1.substr(10, 4); // test

object.find(search_string)

string s1 {"This is a test"};
cout << s1.find("This");   // 0
cout << s1.find("is");     // 2
cout << s1.find("test");   // 10
cout << s1.find('e');      // 11
cout << s1.find("is", 4);  // 5
cout << s1.find("XX");     // string::npos
---------------------------------------------------------------------------------------
Removing Characters - erase() and clear()
    -Removes a substring of characters from a std::string

string s1 {"This is a test"};
cout << s1.erase(0,5); // "is a test"
cout << s1.erase(5,4); // "is a" 
cout << s1.clear();    // empty string " "

---------------------------------------------------------------------------------------
Other useful methods:

string s1 {"Frank"};
cout << s1.length() << endl; // 5

s1 += " James";                     // concatenation operator
cout << s1 << end;                  // Frank James


Input >> and getline()

Reading std::string from cin:

string s1;
cin >> s1; // "Hello there" only accepts "Hello"
cout << s1 << endl; // "Hello"

getline(cin, s1); // Read entire line until \n
cout << s1 << end;   // "Hello there"

getline(cin, s1, 'x'); // "this isx" => "this is"  x is delimiter and is discarded






.Working with C++ Strings